<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>从 0 开始搭建 Hexo Next主题的Github博客</title>
    <url>/2020/05/07/hexo-next-github-blog/</url>
    <content><![CDATA[<p>从 0 开始搭建 <code>Hexo + Next主题 + Github Pages</code> 博客，主要分为 2 部分</p>
<ol>
<li>基本配置：基本功能，包括 Hexo 安装，主题安装，配置 yaml，支持 tags 和 categories</li>
<li>扩展功能：包括评论，阅读人数，TODO</li>
</ol>
<a id="more"></a>

<h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">hexo new <span class="string">"hello"</span> <span class="comment"># 在 source/_posts 生成 hello.md</span></span><br><span class="line">hexo g <span class="comment"># generate 根据 source/ 中的 md 生成 html 页面</span></span><br><span class="line">hexo s <span class="comment"># server 启动 server，通过 localhost:4000 在本地访问网页</span></span><br></pre></td></tr></table></figure>

<p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo 官网</a></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改 <code>blog/_config.yml</code>:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year-:month-:day-:title.md</span> <span class="comment"># File name of new posts, e.g. 2020-XX-XX-title.md</span></span><br></pre></td></tr></table></figure>

<h3 id="Github-deploy"><a href="#Github-deploy" class="headerlink" title="Github deploy"></a>Github deploy</h3><p>在 Github 上创建 repo，名叫<code>&lt;yourname&gt;.github.io</code>，该 repo 将负责保存和展示你的 blog 页面。</p>
<p>安装 deploy 插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save  <span class="comment"># deploy pages to github</span></span><br></pre></td></tr></table></figure>

<p>配置github repo 信息（<code>blog/_config.yml</code>）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span> <span class="comment"># https://github.com/yourname/yourname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>deploy 到 github</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d <span class="comment"># 将网页 deploy 到 github repo，通过 https://yourname.github.io 来访问</span></span><br></pre></td></tr></table></figure>

<h2 id="Next-主题"><a href="#Next-主题" class="headerlink" title="Next 主题"></a>Next 主题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>

<p>使用 next 主题 <code>blog/_config.yml</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>修改 <code>themes/next/_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span>   <span class="comment"># 默认只有 home 和 archives：</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">social:</span> <span class="comment"># 添加 github 链接</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/yourname</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span>   <span class="comment"># 将图片放到 blog/source/images/</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">local_search:</span>  <span class="comment"># 内容搜索</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>这样2 个问题</p>
<ol>
<li>menu 里的新增的菜单点击进去，发现是 404，没有相关页面</li>
<li>search 点了也不起作用</li>
</ol>
<h3 id="tags-amp-categories"><a href="#tags-amp-categories" class="headerlink" title="tags &amp; categories"></a>tags &amp; categories</h3><p>添加相关 page</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">"tags"</span></span><br><span class="line">hexo new page <span class="string">"categories"</span></span><br></pre></td></tr></table></figure>

<p>修改 <code>blog/source/tags/index.md</code>，加上一行</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br></pre></td></tr></table></figure>

<p>修改 <code>blog/source/categories/index.md</code>，加上一行</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br></pre></td></tr></table></figure>

<h3 id="搜索-Search"><a href="#搜索-Search" class="headerlink" title="搜索(Search)"></a>搜索(Search)</h3><p>安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>

<p>好像</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>如何修改 <code>Posted on</code> 的发表时间 -&gt; 可以修改 md 中的 <code>date</code></p>
<p>不显示 <code>Edited on</code> 修改时间</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">updated_at:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h1 id="扩展配置"><a href="#扩展配置" class="headerlink" title="扩展配置"></a>扩展配置</h1><p>涉及 Next 主题的其他配置，比如评论，阅读数等（好多功能摸索中，TODO），需要修改<code>themes/next/_config.yml</code>。</p>
<h2 id="评论功能-Valine"><a href="#评论功能-Valine" class="headerlink" title="评论功能(Valine)"></a>评论功能(Valine)</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span>  <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># Your leancloud application appkey</span></span><br></pre></td></tr></table></figure>

<p>需要去 <a href="https://leancloud.cn/dashboard/login.html#/signin" target="_blank" rel="noopener">LeanCloud</a> 注册，创建应用，之后，获取 appid 和 appkey，<a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener">see more</a></p>
<h2 id="阅读数-Views"><a href="#阅读数-Views" class="headerlink" title="阅读数(Views)"></a>阅读数(Views)</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://yashuning.github.io/tags/hexo/" target="_blank" rel="noopener">Yaya’s blog</a></p>
<p><a href="https://qiuyiwu.github.io/2019/01/25/Hexo-LocalSearch/" target="_blank" rel="noopener">Create Local Search for Your Hexo Blog</a></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 计划</title>
    <url>/2020/01/01/2020-1-1-new-year-plan/</url>
    <content><![CDATA[<h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><ol>
<li><strong>专业类</strong>：计算机专业书籍和学习资料，制定目标（多长时间，多少进度等），当前状态（是否完成，进度）</li>
<li><strong>科普类</strong>：学习技巧，科学见闻等</li>
<li>其他，不能学到知识，但可以陶冶情操~</li>
</ol>
<a id="more"></a>

<h3 id="专业类"><a href="#专业类" class="headerlink" title="专业类"></a>专业类</h3><p>书籍和公开课</p>
<table>
<thead>
<tr>
<th>Title</th>
<th>Comments</th>
<th>Target</th>
<th>Cur status</th>
</tr>
</thead>
<tbody><tr>
<td>《高级编译器的设计与实现》</td>
<td>鲸书, start from 2019-10</td>
<td>in 3月</td>
<td>control flow<br />data flow<br />AA<br />RA</td>
</tr>
<tr>
<td>《深入理解计算机系统》</td>
<td>CSAPP</td>
<td>in 2月</td>
<td></td>
</tr>
<tr>
<td>《程序员的自我修养》</td>
<td></td>
<td>in 1月</td>
<td></td>
</tr>
<tr>
<td>《C++ Primer》</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>《Effective C++》</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>《Effective Java》</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>leetcode cn: <a href="https://leetcode-cn.com/u/liu-hao-b/" target="_blank" rel="noopener">my home page</a></td>
<td>start from may-4</td>
<td>365+</td>
<td>6 by may-6</td>
</tr>
</tbody></table>
<h3 id="科普类"><a href="#科普类" class="headerlink" title="科普类"></a>科普类</h3><table>
<thead>
<tr>
<th>Title</th>
<th>Comments</th>
<th>status</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.bilibili.com/video/BV1EW411u7th" target="_blank" rel="noopener">Crash Coarse Computing Science</a></td>
<td>中文翻译</td>
<td>2 周</td>
</tr>
<tr>
<td><a href="http://open.163.com/newview/movie/courseintro?newurl=%2Fspecial%2Fopencourse%2Fcs50.html" target="_blank" rel="noopener">计算机科学 CS50</a> 哈弗大学</td>
<td>为了讲“二分法”，撕掉了一本书</td>
<td></td>
</tr>
<tr>
<td>《文明之光》</td>
<td>吴军大佬写的科普</td>
<td>done</td>
</tr>
<tr>
<td><a href="https://space.bilibili.com/9458053" target="_blank" rel="noopener">李永乐老师</a></td>
<td>寓教于乐，形象生动</td>
<td></td>
</tr>
<tr>
<td>《如何阅读一本书》</td>
<td>How to read a book</td>
<td>done</td>
</tr>
<tr>
<td>《自控力》</td>
<td>The willpower instinct</td>
<td>done</td>
</tr>
</tbody></table>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><table>
<thead>
<tr>
<th>Title</th>
<th>Comments</th>
<th>status</th>
</tr>
</thead>
<tbody><tr>
<td>《活着》</td>
<td></td>
<td>done</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="健身计划"><a href="#健身计划" class="headerlink" title="健身计划"></a>健身计划</h2><h3 id="瘦身"><a href="#瘦身" class="headerlink" title="瘦身"></a>瘦身</h3><p>142.5 斤 by may-7</p>
<p>目标体重：137 斤</p>
<h3 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h3><table>
<thead>
<tr>
<th>项目</th>
<th>status</th>
<th>time</th>
</tr>
</thead>
<tbody><tr>
<td>HIIT活力</td>
<td>[20,15,10,5]  x [俯卧撑, burpee,蹲跳 ]</td>
<td>4 min</td>
</tr>
<tr>
<td>俯卧撑</td>
<td>50 x 4组</td>
<td></td>
</tr>
<tr>
<td>下蹲</td>
<td>20 x 6组</td>
<td></td>
</tr>
<tr>
<td>跑步</td>
<td>10 km</td>
<td>1 hour 10 min</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>plan</category>
      </categories>
      <tags>
        <tag>plan</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ include and iostream/stdio.h/cstdio</title>
    <url>/2020/04/01/2020-4-1-C-standard-io-headers/</url>
    <content><![CDATA[<p>C++ include 头文件的格式，区分C/C++ Standard Input/Output headers: iostream, stdio.h, cstdio</p>
<a id="more"></a>

<h2 id="C-include"><a href="#C-include" class="headerlink" title="C++ include"></a>C++ include</h2><p>C++ include 头文件的格式有 2 种 (<a href="https://gcc.gnu.org/onlinedocs/cpp/Include-Syntax.html" target="_blank" rel="noopener">read more</a>)：</p>
<ol>
<li><code>#include &lt;file&gt;</code> : 系统头文件(system header files)</li>
<li><code>#include &quot;file&quot;</code> : 用户自己的头文件</li>
</ol>
<p>可以用 <code>gcc -v</code> 查看 include 顺序，比如我Ubuntu 18.04 X86 机器的系统头文件顺序是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;...&gt; search starts here:</span><br><span class="line">&#x2F;usr&#x2F;include&#x2F;c++&#x2F;7</span><br><span class="line">&#x2F;usr&#x2F;include&#x2F;x86_64-linux-gnu&#x2F;c++&#x2F;7</span><br><span class="line">&#x2F;usr&#x2F;include&#x2F;c++&#x2F;7&#x2F;backward</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;7&#x2F;include</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;include</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;7&#x2F;include-fixed</span><br><span class="line">&#x2F;usr&#x2F;include&#x2F;x86_64-linux-gnu</span><br><span class="line">&#x2F;usr&#x2F;include</span><br></pre></td></tr></table></figure>

<h2 id="Standard-I-O-Headers"><a href="#Standard-I-O-Headers" class="headerlink" title="Standard I/O Headers"></a>Standard I/O Headers</h2><p>C++中的标准输入输出头文件 (<a href="https://docs.oracle.com/cd/E19059-01/wrkshp50/805-4956/6j4mh6gov/index.html" target="_blank" rel="noopener">read more</a>)：</p>
<ol>
<li>iostream: 是 C++ 的标准输入输出头文件，包括cout, cin, endl 等</li>
<li>stdio.h: 是 C 的标准输入输出头文件，包括 printf, scanf 等，不建议用，原因有 2 个：<ul>
<li>没有 C++ namespace</li>
<li>没有 iostream 安全，干净，以及格式问题等（<a href="https://www.quora.com/Is-stdio-h-better-than-iostream" target="_blank" rel="noopener">read more</a>)</li>
</ul>
</li>
<li>cstdio: C++ 头文件，将 stdio.h 包含在 std namespace 中（即 std::printf)，如果喜欢用 printf 等，建议用 cstdio</li>
</ol>
<p>PS: 1 和 3 的位置都在 C++ include 文件夹（即/usr/include/c++/7），而 2 在 C include 文件夹（即/usr/include）</p>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>C++ style：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, World!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>C style</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C++ header</tag>
      </tags>
  </entry>
  <entry>
    <title>Globalprotect - a problem with the security certificate</title>
    <url>/2020/04/22/2020-4-22-globalprotect-ca/</url>
    <content><![CDATA[<p>最近遇到个很迷的 bug，导致 globalprotect 不能连上公司 VPN，错误信息是关于 <code>Security Certificate</code>，详情如下：</p>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ globalprotect connect -p vpn-xx.com</span><br><span class="line">Retrieving configuration...</span><br><span class="line"></span><br><span class="line">There is a problem with the security certificate, so the identity of den-vpn.amperecomputing.com cannot be verified. Please contact the Help Desk <span class="keyword">for</span> your organization to have the issue rectified.</span><br><span class="line">Warning: The communication with vpn-xx.com may have been compromised. We recommend that you <span class="keyword">do</span> not <span class="built_in">continue</span> with this connection.</span><br></pre></td></tr></table></figure>

<p>网上找了好久，没有找到直接的解决方案。后来 Stackoverflow 上找到个 <code>certificate</code> 相关的问题：<a href="https://askubuntu.com/questions/440580/how-does-one-remove-a-certificate-authoritys-certificate-from-a-system" target="_blank" rel="noopener">How does one remove a certificate authority’s certificate from a system?</a>，照着做了第一步：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ sudo dpkg-reconfigure ca-certificates</span><br><span class="line">/usr/sbin/dpkg-reconfigure: ca-certificates is broken or not fully installed</span><br></pre></td></tr></table></figure>

<p>报错了，才发现应该是 <code>ca-certificates</code> 问题，重新安装之后就好了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ sudo apt-get install ca-certificates</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>《如何阅读一本书》读书笔记</title>
    <url>/2020/05/03/2020-5-3-how-to-read-a-book/</url>
    <content><![CDATA[<p><a href="https://book.douban.com/subject/1013208/" target="_blank" rel="noopener">《如何阅读一本书》</a>介绍读书技巧，本书的主旨：</p>
<blockquote>
<ol>
<li>阅读分为 4 个层次：基础-&gt;检视-&gt;分析-&gt;主题。没有经过分析阅读，就没法理解一本书。</li>
<li>主动阅读：对自己，以及自己面对的书籍，要求的越多，获得的就越多</li>
</ol>
</blockquote>
<p>阅读的目的：为获得资讯而读，为求得理解而读。如果一本书很轻松就读懂，说明从中也学不到什么知识，重点是加工困难的部分，成为自己的知识。</p>
<a id="more"></a>

<h1 id="第一个层次：基础阅读"><a href="#第一个层次：基础阅读" class="headerlink" title="第一个层次：基础阅读"></a>第一个层次：基础阅读</h1><p>能识字，能“阅读”任何书籍，但缺乏阅读技巧，不一定能有效（有收获）</p>
<h1 id="第二个层次：检视阅读"><a href="#第二个层次：检视阅读" class="headerlink" title="第二个层次：检视阅读"></a>第二个层次：检视阅读</h1><h2 id="有系统的略读（Skim-or-Pre-read）"><a href="#有系统的略读（Skim-or-Pre-read）" class="headerlink" title="有系统的略读（Skim or Pre-read）"></a>有系统的略读（Skim or Pre-read）</h2><p>把自己当做一个侦探，发掘书的价值（这是一本什么样的书，是否有必要精读），略读：</p>
<ol>
<li>书名页+序</li>
<li>目录页</li>
<li>索引：重要词条和相关书籍与作者</li>
<li>挑几个最相关的篇章，看看开头和结尾</li>
<li>随便翻翻，留意主题的脉动</li>
</ol>
<p>最多不过 1 小时，对本书有个大体的了解，关键是要<strong>主动+集中精神</strong></p>
<h2 id="粗浅的阅读"><a href="#粗浅的阅读" class="headerlink" title="粗浅的阅读"></a>粗浅的阅读</h2><p>只注意能理解的部分，跳过难懂的地方，达到对本书 50%或更少的理解，但也值得，为更深层次的阅读打基础。</p>
<p>如果你太专注于细微的难以理解的小点，就会陷入其中，或者忽视了本书的大原则。</p>
<h2 id="阅读的速度"><a href="#阅读的速度" class="headerlink" title="阅读的速度"></a>阅读的速度</h2><p>一般人的速度都有提升空间，但不能一味地求快，需要用不同的速度：在无关紧要的地方加快，在困难的地方放慢。</p>
<p>加快阅读速度：避免“半出声”（会过度把注意力集中在发音上，从而忽略了理解其内涵），矫正眼睛的“逗留”和“倒退”现象。<strong>指读法</strong>：强迫验证跟随手指，向前移动。</p>
<h1 id="第三个层次：分析阅读"><a href="#第三个层次：分析阅读" class="headerlink" title="第三个层次：分析阅读"></a>第三个层次：分析阅读</h1><p>本书重点，花了最多的篇幅（超过50%）来描述。</p>
<h2 id="做一个对自我有要求的读者"><a href="#做一个对自我有要求的读者" class="headerlink" title="做一个对自我有要求的读者"></a>做一个对自我有要求的读者</h2><p>围绕 4 个问题：</p>
<ol>
<li>整体上，这本书在谈些什么？</li>
<li>细节上，作者细说了什么，怎么说的？</li>
<li>说得有道理吗？</li>
<li>跟我有什么关系？</li>
</ol>
<p>让一本书真正属于你：你必须读出言外之意，才能有更大收获。要求“写出言外之意”。</p>
<h2 id="第一个阶段：透视一本书"><a href="#第一个阶段：透视一本书" class="headerlink" title="第一个阶段：透视一本书"></a>第一个阶段：透视一本书</h2><p>像“X光”一样，透过衣服，肌肉，看到骨架。</p>
<p>规则一：书籍的<code>分类</code></p>
<p>规则二：使用单一的句子或者几句话，叙述本书的<code>整体内容</code></p>
<p>规则三：说明本书的重要篇章有哪些，怎么组织成<code>整体的架构</code>？</p>
<p>规则四：找出作者在问的问题，或作者想解决的<code>问题</code></p>
<h2 id="第二个阶段：共识和主旨"><a href="#第二个阶段：共识和主旨" class="headerlink" title="第二个阶段：共识和主旨"></a>第二个阶段：共识和主旨</h2><p>规则五：与作者达成<code>共识</code>。找出<strong>关键字</strong>，注意<strong>专门用语</strong>与<strong>特殊词汇</strong></p>
<p>规则六：将一本书最重要的句子（<strong>关键句</strong>）圈出来，找出其中的<code>主旨</code>。</p>
<p>规则七：找出重要<code>论述</code>的段落</p>
<p>规则八：找出作者的<code>解答</code>。解决了哪些问题，那些事未解决的</p>
<h2 id="第三个阶段：公正的评价一本书"><a href="#第三个阶段：公正的评价一本书" class="headerlink" title="第三个阶段：公正的评价一本书"></a>第三个阶段：公正的评价一本书</h2><p>受教是一种美德。受教不等于被动和顺从，不是卑躬屈膝。</p>
<p>规则九：完整的<code>了解</code>一本书，不要急着评论</p>
<p>规则十：不要<code>争强好胜</code>，或者盲目反对</p>
<p>规则十一：尊重<code>知识与个人观点</code>的不同，在做任何判断之前，要找出理论基础。</p>
<p>反对作者：</p>
<ol>
<li>知识不足</li>
<li>知识错误</li>
<li>不合逻辑</li>
<li>分析与理由不完整</li>
</ol>
<h1 id="第三个层次：主题阅读"><a href="#第三个层次：主题阅读" class="headerlink" title="第三个层次：主题阅读"></a>第三个层次：主题阅读</h1><p>领域中相关的作者和书籍。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>科普</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode Remote Debug C/C++ Application (gcc) 实践</title>
    <url>/2020/04/20/2020-4-20-vscode-debug/</url>
    <content><![CDATA[<p>VSCode 是我主要使用的编辑器，主要优点有：</p>
<ol>
<li><strong>轻快简洁，功能强大</strong>。再也不用记住繁琐的命令，用 <code>ctrl+shift+p</code> 快速搜索相关操作。Multi Cursors 编辑多行。</li>
<li><strong>颜值高</strong>。“Dracula Official” 和terminal 使用的 Dracula theme 简直绝配。</li>
<li><strong>插件多，扩展强</strong>。“Remote - SSH” 用来远程开发的神器，甚至能支持 AArch64。</li>
</ol>
<p>唯一的遗憾，就是还不能方便的 debug，所以前几天花时间捣鼓了一阵，终于基本可用了。</p>
<a id="more"></a>

<h1 id="Small-Case"><a href="#Small-Case" class="headerlink" title="Small Case"></a>Small Case</h1><p>先从小例子开始，Fibnacci计算 fib.c：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">int</span> f0 = <span class="number">0</span>, f1 = <span class="number">1</span>, f2, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        f2 = f0 + f1;</span><br><span class="line">        f0 = f1;</span><br><span class="line">        f1 = f2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, res;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    res = fib(m);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fib(%d) is %d\n"</span>, m, res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先编译和测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ gcc -O0 -g fib.c -o fib</span><br><span class="line">❯ ./fib</span><br><span class="line">6</span><br><span class="line">fib(6) is 8</span><br></pre></td></tr></table></figure>

<p>参考官方<a href="https://code.visualstudio.com/docs/cpp/launch-json-reference" target="_blank" rel="noopener">C++ debug configuration文档</a>，修改 <code>launch.json</code>:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"(lldb) Launch"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">    <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">    <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/fib"</span>,</span><br><span class="line">    <span class="attr">"args"</span>: [],</span><br><span class="line">    <span class="attr">"stopAtEntry"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">    <span class="attr">"environment"</span>: [],</span><br><span class="line">    <span class="attr">"externalConsole"</span>: <span class="literal">true</span>, <span class="comment">// 必须为 true，否则没找到终端能让我们输入参数</span></span><br><span class="line">    <span class="attr">"MIMode"</span>: <span class="string">"lldb"</span> <span class="comment">// 实验在 MacBook 上，所以用了自带的 lldb</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>发现基本可用，除了快捷键有点不方便（F5, F10 和 F11，后面 2 个键盘位置太偏），还有几个小问题：</p>
<ol>
<li><code>launch.json</code> 里的设置 <code>externalConsole</code> 要为 true，否则找不到一个终端能让我输入 cin 参数，程序就卡在 19 行 scanf 那里了。</li>
<li><strong>条件断点(conditional breakpoint)</strong>的支持不好。设置条件断点后（比如在第 11 行设置为<code>i == 5</code>），竟然不能立刻生效，需要：1）手动 disable breakpoint，再手动 enable breakpoint；或者 2）重启 debug</li>
<li>没有 disassembly instruction mode，不能查看汇编代码（这点没有 eclipse 方便）</li>
</ol>
<h1 id="How-to-Debug-GCC"><a href="#How-to-Debug-GCC" class="headerlink" title="How to Debug GCC"></a>How to Debug GCC</h1><p>重点来了，要满足工作需要，还要能 debug 更复杂的场景，比如怎样 debug 编译器(gcc or llvm)？下面详解通过本地 MacBook 在远程 X86 服务器上用 g++ 编译 fib.c，即<code>g++ -c -O2 fib.c</code>的过程。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在远程 X86 服务器上 build gcc 代码，最好用 O0 （默认的是 O2），config 和 build 步骤如下：</p>
<ol>
<li>下载第三方 library，到 gcc 源代码目录（比如<code>cd /home/hliu/toolchain/gcc/</code>)，<code>contrib/download_prerequisites</code></li>
<li>配置 gcc：<code>mkdir ../build; cd ../build; ../gcc/configure --prefix=$PWD/../install_O0 --disable-multilib</code></li>
<li><code>make BOOT_CFLAGS=&quot;-g3 -O0&quot; -j 5</code></li>
<li><code>make install</code></li>
</ol>
<p>然后，启动 MacBook 上的 VSCode，通过 Remote-SSH 插件连上远端 host ip，然后:</p>
<ol>
<li>打开 fib.c 所在文件夹</li>
<li>右键 -&gt; <code>Add Folder to Workspace</code>：将 gcc 代码加入 workspace，因为我们同时需要 fib.c 和 gcc 代码。</li>
</ol>
<p>下面详解后面的步骤</p>
<h2 id="配置-launch-json"><a href="#配置-launch-json" class="headerlink" title="配置 launch.json"></a>配置 launch.json</h2><p>VSCode -&gt; Run -&gt; Add Configurations -&gt;  (gdb) Launch，有个初始的默认配置如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"configurations": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"(gdb) Launch"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">        <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">        <span class="attr">"program"</span>: <span class="string">"enter program name, for example $&#123;workspaceFolder&#125;/a.out"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [],</span><br><span class="line">        <span class="attr">"stopAtEntry"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">        <span class="attr">"environment"</span>: [],</span><br><span class="line">        <span class="attr">"externalConsole"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"MIMode"</span>: <span class="string">"gdb"</span>,</span><br><span class="line">        <span class="attr">"setupCommands"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line">                <span class="attr">"ignoreFailures"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>参见 <a href="https://dmalcolm.fedorapeople.org/gcc/newbies-guide/debugging.html" target="_blank" rel="noopener">Debugging GCC文档</a>，gcc 只是个 <code>driver</code>，真正要调试的是 C/C++ Compiler，即 <code>cc1</code> 或者 <code>cc1plus</code>。通过 gcc 命令行加 <code>-v</code> 获取 Command Line Args 列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/toolchain/install_O0/bin/gcc -O2 -c fib.c -v</span><br><span class="line">...</span><br><span class="line">/home/hliu/toolchain/install_O0/bin/../libexec/gcc/x86_64-pc-linux-gnu/10.0.1/cc1 -quiet -v -imultiarch x86_64-linux-gnu -iprefix /home/hliu/toolchain/install_O0/bin/../lib/gcc/x86_64-pc-linux-gnu/10.0.1/ fib.c -quiet -dumpbase fib.c -mtune=generic -march=x86-64 -auxbase fib -O2 -version -o /tmp/ccR1kTkZ.s</span><br></pre></td></tr></table></figure>

<p>其中，<code>program</code> 改成 cc1 的位置，后面的都是<code>args</code>，用引号和逗号将参数分隔（<strong>这里不能用一个引号全部括起来，VSCode 不能识别</strong>）。所以相关改动如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"program": "/home/hliu/toolchain/install_O0/bin/../libexec/gcc/x86_64-pc-linux-gnu/10.0.1/cc1",</span><br><span class="line">"args": ["-quiet", "-v", "-imultiarch", "x86_64-linux-gnu", "-iprefix", "/home/hliu/toolchain/install_O0/bin/../lib/gcc/x86_64-pc-linux-gnu/10.0.1/", "fib.c", "-quiet", "-dumpbase", "fib.c", "-mtune=generic", "-march=x86-64", "-auxbase", "fib", "-O2", "-version", "-o", "/tmp/ccR1kTkZ.s",],</span><br></pre></td></tr></table></figure>

<h2 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h2><p>然后 <code>RUN (gdb) Launch</code>，开始调试，会停在 entry 入口 <code>main.c</code>，然后就可以打断点调试了。比如我们想调试 <code>pass_fre</code>，在pass_fre::execute() (<code>tree-ssa-sccvn.c</code>)里打个断点，<code>Continue(F5)</code>就会停到那里。</p>
<p>然而，真正用起来还有很多问题。</p>
<h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>现在VSCode提供的信息有 VARIABLES, WATCH, CALL STACK, BREAKPOINTS，以及 DEBUG CONSOLE，其他诸如 disssembly，register 没有。</p>
<p>可以通过手动执行 gdb 的命令行，输入相关参数来查看，即 DEBUG CONSOLE 中输入命令，但 VSCode 很坑的是命令前面需要手动输入 <code>-exec &lt;command&gt;</code>，详见 VSCode DEBUG CONSOLE 提示：</p>
<blockquote>
<p>execute debugger commands using “-exec <command>“, for example “-exec info registers” will list registers in use (when GDB is the debugger)</p>
</blockquote>
<p>而每次都要输入 <code>-exec</code>的话，太麻烦了，所以网上找到的 work around 是添加 shortcut (keybindings.json)：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+alt+e"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.insertSnippet"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"inDebugRepl"</span>,</span><br><span class="line">    <span class="attr">"args"</span>: &#123;</span><br><span class="line">        <span class="attr">"snippet"</span>: <span class="string">"-exec "</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 <code>ctrl+alt+e</code> 来快速输入 <code>-exec</code>，比如我们要查看 registers:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ -<span class="built_in">exec</span> i reg</span><br><span class="line">rax            0x0	0</span><br><span class="line">rbx            0x0	0</span><br><span class="line">rcx            0x7	7</span><br><span class="line">rdx            0x2ee1828	49158184</span><br></pre></td></tr></table></figure>

<h3 id="gdbinit"><a href="#gdbinit" class="headerlink" title="gdbinit"></a>gdbinit</h3><p>调试 cc1 的过程中需要用到一些 help function，比如打印当前 function name：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">define pfn</span><br><span class="line">    <span class="function">p <span class="title">current_function_name</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="built_in">end</span></span></span><br></pre></td></tr></table></figure>

<p>这些 函数是写在一个文件里（gcc.dbg)，以前是命令行直接 <code>gdb -x gcc.dbg</code>。现在不能这样用了。所以我在 <code>~/.gdbinit</code> 中加了一行，每次自动加载:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> &lt;path-to-gcc.gdb&gt;</span><br></pre></td></tr></table></figure>

<h3 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h3><p>真正头痛的问题来了，见前面 small case，本来条件断点就不能自动触发，每次设置后需要手动 disable enable，而更严重的是发现不能比较 <code>string</code> 和 <code>const char *</code>了。如果源代码很大，需要定位到相关函数名，几乎必须要用条件断点。</p>
<p>原来（eclipse 或者命令行下用 gdb）比较 <code>const char *</code> 是使用 <code>$_streq</code>，更多详情见 <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Convenience-Funs.html#Convenience-Funs" target="_blank" rel="noopener">gdb convenience functions</a>，现在条件断点完全没有设置上，报错了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Condition <span class="string">"_<span class="variable">$streq</span>(current_function_name(), "</span>fib<span class="string">")"</span> : Problem parsing arguments: <span class="built_in">break</span>-insert -f -c <span class="string">"_<span class="variable">$streq</span>(current_function_name(), "</span>fib<span class="string">")"</span></span><br></pre></td></tr></table></figure>

<p>仔细看log，是引号识别问题，所以条件断点改成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_$streq(current_function_name(), \&quot;fib\&quot;)</span><br></pre></td></tr></table></figure>

<p>这样就能在编译函数 fib 时停下来了</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过 VSCode remote-ssh 远程调试程序非常方便，但也遇到了一些坑：</p>
<ol>
<li>标准输入输出，配置文件要用”externalConsole”</li>
<li>命令行模式每次需要手动输入 <code>-exec</code>，可以添加相应的快捷键</li>
<li>配置文件 <code>args</code> 需要用多个引号和逗号分隔，不能用一个引号</li>
<li>条件断点：设置后不能立即生效，需要手动 disable&amp;enable，或者重启调试</li>
<li>条件断点：处理字符串的引号时有 bug，需要加(\)</li>
</ol>
]]></content>
      <categories>
        <category>tools</category>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>《自控力》读书笔记</title>
    <url>/2020/05/04/2020-5-4-the-willpower-instinct/</url>
    <content><![CDATA[<p>什么是<a href="https://book.douban.com/subject/10786473/" target="_blank" rel="noopener">《自控力》</a>：人们拥有的“我想要”，“我不要”，以及“我要”这三种力量的协同努力。</p>
<p>自控力的重点在于处理好“明天”和“今天”，如何才能抵制当前的诱惑，追求长远的目标？</p>
<p>“明天”无法准确预知：如果你先获得“今天”的奖励，让你放弃转而追求无法预知的“明天”的丰厚奖励，人们也很难办到。所以需要优先考虑未来，延迟考虑当前：把未来的奖励和当前的奖励放到同一个天平上，<strong>不要对未来的奖励打折</strong>。</p>
<p>其他：人们大部分时间的决定都是无目标的，大脑也没有意识到这一点(需要“自我意识”)。</p>
<a id="more"></a>

<h1 id="本能"><a href="#本能" class="headerlink" title="本能"></a>本能</h1><p>意志力是种生理本能，它和压力一样，通过不断进化来保护我们不受自身伤害。</p>
<ul>
<li>呼吸出你的自控力：把你的呼吸降到每分钟4～6次，将身体调整到适合自控的生理状态。</li>
<li>5分钟给意志力加油：出门活动，哪怕只是在周围转转，也能减少压力、改善心情、提供动力。</li>
<li>睡眠：打盹或补觉可以消除睡眠不足的影响。</li>
<li>放松能让你恢复意志力储备：躺下，深呼吸，让“放松的生理反应”帮你从自控和压力造成的疲惫中恢复过来。</li>
</ul>
<h1 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h1><p>自控力就像肌肉一样有极限。自控力用得太多会疲惫，但坚持训练能增强自控力。</p>
<p>注意什么时候你的意志力最强，什么时候你最容易放弃。你的疲惫感是真的吗？</p>
<ul>
<li>饮食：确保你的身体摄入了足够的食物，能为你提供足够多的能量。</li>
<li>锻炼：选择一件事来做（“我想要”的力量）或不做（“我不想”的力量），或者记录一件你不曾关注的事情，以此锻炼你的“自控力肌肉”。</li>
<li>发现自己最重要的“我想要”的力量：也就是你脆弱的时候给你动力的东西。每当你面对诱惑、想要放弃的时候，都想一想这个东西。</li>
</ul>
<h1 id="容忍罪恶：为何善行之后会有恶行"><a href="#容忍罪恶：为何善行之后会有恶行" class="headerlink" title="容忍罪恶：为何善行之后会有恶行"></a>容忍罪恶：为何善行之后会有恶行</h1><p>当我们将意志力挑战看成衡量道德水平的标准时，善行就会允许我们做坏事。为了能更好地自控，我们需要忘掉美德，关注目标和价值观。</p>
<p>你是否在向明天赊账？你是不是告诉自己明天会弥补今天的过错？如果是这样的话，你是否真的弥补上了？光环效应：你是不是只看到了坏东西好的一面，如折扣省钱、零脂肪、保护环境？当你想到你的意志力挑战时，你觉得哪部分的你才是“真实”的你？是想追求目标的你，还是需要被控制的你？</p>
<ul>
<li>明天和今天毫无区别：当你想改变行为的时候，试着<strong>减少行为的变化性</strong>，而不是减少某种行为</li>
<li>取消许可，牢记理由：下一回，当你发现自己在用曾经的善行为放纵辩护的时候，停下来想一想你做“好”事的原因，而不是你应不应该得到奖励</li>
</ul>
<h1 id="多巴胺：为什么我们误把渴望当幸福"><a href="#多巴胺：为什么我们误把渴望当幸福" class="headerlink" title="多巴胺：为什么我们误把渴望当幸福"></a>多巴胺：为什么我们误把渴望当幸福</h1><p>我们的大脑错把<strong>奖励的承诺</strong>（多巴胺）当做快乐的保证，所以，我们会从不可能带来满足的事物中寻找满足感。</p>
<p>是什么让你的多巴胺神经元不停燃烧？是什么给了你奖励的承诺，迫使你去寻找满足感？观察一下零售商和营销人员如何刺激奖励的承诺？注意观察，欲望是如何引发压力和焦虑的。</p>
<ul>
<li>为了你的“我要做”挑战释放多巴胺：如果你总是拖延着不做某些事，试着把它和那些能让你的多巴胺神经元燃烧的事联系在一起，促使你自己去做那些事</li>
<li>测试奖励的承诺：做那些大脑告诉你你会快乐、但似乎无法让你满足的事，比如吃零食、购物、电视以及与网络相关的、浪费时间的事，注意观察自己放纵时的感受。现实和大脑的承诺相符吗？</li>
</ul>
<h1 id="那又如何：情绪低落使人屈服于诱惑"><a href="#那又如何：情绪低落使人屈服于诱惑" class="headerlink" title="那又如何：情绪低落使人屈服于诱惑"></a>那又如何：情绪低落使人屈服于诱惑</h1><p>情绪低落会使人屈服于诱惑，摆脱罪恶感会让你变得更强大。</p>
<p>当你面临压力、感到焦虑或情绪低落时，你会怎么解决？注意那些从媒体、网络或其他渠道听到或看到的压力因素。当意志力失效的时候，你会产生罪恶感并责备自己吗？你会用幻想未来的自己来改善现在的心情，而不是采取实际行动来改善自己的行为吗？</p>
<ul>
<li>有效的解压方法：下一回，当你面临巨大的压力时，尝试一种有效的解压方法，例如锻炼身体或参加体育活动、祈祷或参加宗教活动、阅读、听音乐、花时间和家人朋友在一起、按摩、外出散步、冥想或做瑜伽，以及培养其他有创造性的爱好。</li>
<li>失败的时候，请原谅自己：面对自己的挫折，持同情自我的态度，以免罪恶感让你再次放弃抗争</li>
<li>乐观的悲观主义者更有可能成功：预测你什么时候、会怎样受到诱惑和违背承诺，想象一个不让自己放弃抗争的具体方法</li>
</ul>
<h1 id="出售未来：及时享乐的经济学"><a href="#出售未来：及时享乐的经济学" class="headerlink" title="出售未来：及时享乐的经济学"></a>出售未来：及时享乐的经济学</h1><p>我们无法明确地预知未来。</p>
<p><strong>未来的奖励会打折扣</strong>，你打了几折？你在等待未来的自己吗？</p>
<ul>
<li>等待10分钟：在诱惑面前强制安排10分钟的等待时间。在这10分钟里，一定要时刻想着长远的奖励，抵制住诱惑。</li>
<li>降低你的折扣率：当你受到诱惑，要做和长期利益相悖的事情时，请想一想，这个选择意味着，你为了即时的满足感放弃了更好的长期奖励。</li>
<li>预先对未来的自己作出承诺：作好拒绝诱惑的准备，让改变偏好变得更难，用奖励或威胁来激励未来的自己。</li>
<li>预见未来的自己：创造一个未来的记忆，给未来的自己发条信息，想象一下未来的自己。</li>
</ul>
<h1 id="为什么意志力会传染"><a href="#为什么意志力会传染" class="headerlink" title="为什么意志力会传染"></a>为什么意志力会传染</h1><p>自控受到社会认同的影响，这使得意志力和诱惑都具有传染性。</p>
<p>你的社交网络，有没有其他人和你有同样的意志力挑战？你在模仿谁？你最可能从谁身上学到东西？你有没有用社会认同来说服自己，说你的意志力挑战没什么大不了？</p>
<ul>
<li>增强你的免疫系统：在每天刚开始的时候，花点时间想一想自己的目标。</li>
<li>感染自控力：给自己树立一个榜样。问问自己：那个意志力强人会怎么做？</li>
<li>自豪感的力量：公开你的意志力挑战，想象你在意志力挑战成功后将多么自豪。</li>
<li>把它变成集体项目</li>
</ul>
<h1 id="“我不要”的力量"><a href="#“我不要”的力量" class="headerlink" title="“我不要”的力量"></a>“我不要”的力量</h1><p>试图压抑自己的想法、情绪和欲望，只会产生相反的效果，让你更容易去想，去感受、去做你原本想逃避的事</p>
<p>你有没有想逃避的想法？压抑这些想法是否有效？试图摆脱某种想法，是否反而让它更强烈？你最想得到的是什么？当你拼命试图把某件东西赶出脑海，是否反而对它产生了更强的渴望？</p>
<ul>
<li>忠于你的感受，但别相信你所有的想法：当你产生不快时，专注于呼吸，想象这些想法像浮云一样逐渐淡去</li>
<li>直面只剩欲望，但不要付诸行动：当欲望来袭，注意到它，但不要马上试图转移注意力或与之争辩。提醒自己“白熊”现象和“反弹”效应。</li>
<li>驾驭冲动：但冲动一直存在时，与这种感觉共处，像驾驭海浪一样驾驭它，不要试图摆脱它，也不要将冲动付诸行动。</li>
</ul>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>如果说真的有自控力秘诀，那么从科学的角度来说确实有一个，那就是集中注意力。</p>
<p>当你作出决定的时候，你需要训练自己的大脑，让它意识到这一点，而不是让它自行其是。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>科普</tag>
      </tags>
  </entry>
</search>
