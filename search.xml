<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DELL台式机安装 Ubuntu 20.04 系统</title>
      <link href="/2020/09/06/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/09/06/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>记一次悲催的重装系统经历，望后面吸取教训。</p><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><h3 id="1-制作安装盘"><a href="#1-制作安装盘" class="headerlink" title="1 制作安装盘"></a>1 制作安装盘</h3><p>在Win10下用UUI制做Ubuntu安装U盘，然后重启，选择从U盘启动。</p><p><strong>不用Legacy BIOS安装</strong>，会无法识别安装U盘</p><blockquote><p>Selected boot device failed. Press any key to reboot the system.</p></blockquote><p>网上搜了一些“UEFI是32-bit”，要用<code>rEFind</code>，之类的，都不是原因，解决办法是</p><blockquote><p>Disable Legacy BIOS，一定要用UEFI，详见 <a href="https://www.dell.com/support/article/zh-cn/sln297060/xps-13-9343-%E5%A6%82%E4%BD%95%E5%9C%A8%E5%B7%B2%E9%92%88%E5%AF%B9unified-extensible-firmware-interface-uefi-bios%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE%E7%9A%84%E6%88%B4%E5%B0%94pc%E4%B8%8A%E5%AE%89%E8%A3%85ubuntu-developer-edition-14-04?lang=zh" target="_blank" rel="noopener">UEFI安装Ubuntu</a></p></blockquote><h3 id="2-独显和集显问题"><a href="#2-独显和集显问题" class="headerlink" title="2 独显和集显问题"></a>2 独显和集显问题</h3><p>通过第一步后，终于能选择“Install Ubuntu”，结果选了之后系统黑屏，没有任何反应。原因是</p><blockquote><p>我用的HDMI接NV独立显卡到显示器，可能是driver问题，导致显示器没有接收到信号</p></blockquote><p>改用DP连接电脑的集成显卡，结果重启还有问题</p><blockquote><p>Attention: Unsupported Video Configuration Detected</p><p>This computer has an add-in graphics card, but the moniter cable is plugged into the integrated video connnector.</p></blockquote><p>独显在的情况下，集显用不了。把独立显卡拔掉，改用DP连接电脑，终于能顺利安装好。</p><p>然后再把集显插上，连集显</p><h2 id="安装应用"><a href="#安装应用" class="headerlink" title="安装应用"></a>安装应用</h2><p>这一步是最简单，最安心的了。</p><ul><li>[ ] VSCode</li><li>[ ] 坚果云</li><li>[ ] Chrome</li><li>[ ] Terminator/Tilix</li><li>[ ] Typora</li><li>[ ] zsh环境</li><li>[ ] Vim,Git,Meld,…</li><li>[ ] Lantern (科学上网)</li></ul><p>到此，就基本可用了</p><h3 id="中文输入法和字体"><a href="#中文输入法和字体" class="headerlink" title="中文输入法和字体"></a>中文输入法和字体</h3><p>搜狗输入法官方还不支持20.04，改用其他中文输入法代替（Shuangpin）</p><p>字体问题，JP优先改为ZH优先（否则”关门“这2个汉字会显示日文版本，<a href="https://www.zhihu.com/question/46637444/answer/102311689" target="_blank" rel="noopener">更多</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/fonts/conf.d/64-language-selector-prefer.conf <span class="comment"># 将JP移至最后即可。</span></span><br></pre></td></tr></table></figure><p>安装tweak，调整字体大小（4k显示器上字太小）和其他</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. sudo apt install unity-tweak-tool</span><br></pre></td></tr></table></figure><h3 id="美化主题和图标"><a href="#美化主题和图标" class="headerlink" title="美化主题和图标"></a>美化主题和图标</h3><p><a href="https://blog.csdn.net/qq_36999496/article/details/98244685" target="_blank" rel="noopener">参考链接</a></p><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>重装的原因就很搞，之前半年一直用的是MacOS笔记本，连接到27寸4K屏幕上当台式机用。后来受不了了：</p><ol><li>15寸MacBook Pro低配版性能太差，连上外接显示器风扇狂转。</li><li>MacOS一大堆快捷键，和Windows/Ubuntu不兼容，容易搞混。</li><li>缺少一些实体按键，F1-12，Delete，Home，End，作为程序员不能忍</li></ol><p>我就换回用台式机，原来台式机是EasyBCD引导的Win10+Ubuntu18.04双系统，还挺好用的，但我一系列S操作导致2个系统都坏了</p><ol><li>首先，是想把Ubuntu 18.04升级到20.04，结果升级到一半，不小心把terminal关掉了，然后terminal就再也打不开，也没法升级了</li><li>然后，我就回到Win10，制作了Ubuntu 20.04的安装U盘，想重装一下，结果通过BIOS识别不了安装U盘。</li><li>结果搞着搞着（反复进Win10，重启，安装），手贱把EasyBCD的Win10选项删除了，导致Win10进不去。</li><li>晕倒，2个系统都进不去了。</li><li>网上查，是要用UEFI来安装系统（以前都是BIOS，后来电脑不知升级了）</li><li>结果UEFI是能识别U盘启动盘了，<code>install ubuntu</code> 选择后，又黑屏</li><li>黑屏搞了半天，原来是NV独立显卡惹的祸，然后又把独立显卡拔了，用DP线连集显</li><li>通过集显安装好后，又把独显插上，用HDMI线连独显…</li><li>终于把Ubuntu搞好了，Win10后面再说吧…</li></ol>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Easy 中的最难：459.重复的子字符串</title>
      <link href="/2020/08/29/Easy%20%E9%A2%98%E7%9B%AE%20459%20%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2020/08/29/Easy%20%E9%A2%98%E7%9B%AE%20459%20%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>这次遇到leetcode每日一题「<a href="https://leetcode-cn.com/problems/repeated-substring-pattern/" target="_blank" rel="noopener">459.重复的子字符串</a>」，虽然难度是「简单」，我愿称其为最难的简单题目。题目描述如下：</p><blockquote><p>给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。</p><p>示例 1：</p><p>输入: “abab”</p><p>输出: True</p><p>解释: 可由子字符串 “ab” 重复两次构成。</p></blockquote><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h2 id="方法-1-枚举"><a href="#方法-1-枚举" class="headerlink" title="方法 1 枚举"></a>方法 1 枚举</h2><p>为啥难呢，首先是做题时，想不到好的方法，只能暴力破解（Brute-Force，枚举）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeatedSubstringPattern</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">        N = len(s)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(i)</span>:</span></span><br><span class="line">            np = N // i</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, i):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, np):</span><br><span class="line">                    <span class="keyword">if</span> s[j] != s[k*i + j]:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N//<span class="number">2</span>, <span class="number">0</span>, <span class="number">-1</span>): <span class="comment"># 检查是否「N//2」长度的重复子串</span></span><br><span class="line">            <span class="keyword">if</span> N % i == <span class="number">0</span> <span class="keyword">and</span> check(i):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>容易出错且效率不高，总算能通过。然后看答案，震惊竟然有多达 4 种解法，方法1就是枚举，后 3 个答案看不懂。</p><h2 id="方法-2-字符串匹配"><a href="#方法-2-字符串匹配" class="headerlink" title="方法 2 字符串匹配"></a>方法 2 字符串匹配</h2><p>实现只有 1 行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (s + s).find(s, <span class="number">1</span>) != len(s)</span><br></pre></td></tr></table></figure><p>这种方式明显效率比枚举高很多，时间少</p><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">运行时间</th><th style="text-align:left">内存消耗</th></tr></thead><tbody><tr><td style="text-align:left">2</td><td style="text-align:left">48 ms</td><td style="text-align:left">13.7 MB</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">320 ms</td><td style="text-align:left">13.8 MB</td></tr></tbody></table></div><p>但看不懂原理了</p><blockquote><p>证明需要使用一些<strong>同余运算</strong>的小技巧，可以见方法三之后的<strong>「正确性证明」</strong>部分。这里先假设我们已经完成了证明，这样就可以使用非常简短的代码完成本题。在下面的代码中，我们可以从位置 1 开始查询，并希望查询结果不为位置 n，这与移除字符串的第一个和最后一个字符是等价的。</p></blockquote><h2 id="方法-3-KMP-算法"><a href="#方法-3-KMP-算法" class="headerlink" title="方法 3 KMP 算法"></a>方法 3 KMP 算法</h2><p>该方法实际也是 1 行，调用 KMP 算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeatedSubstringPattern</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> kmp(s + s, s)</span><br></pre></td></tr></table></figure><p>但 KMP 算法实现又看不懂了，再去找文章理解，比如<a href="https://www.zhihu.com/question/21923021/answer/1032665486" target="_blank" rel="noopener">如何更好地理解和掌握 KMP 算法? - 阮行止的回答 - 知乎</a> </p><h2 id="方法-4-优化的-KMP-算法"><a href="#方法-4-优化的-KMP-算法" class="headerlink" title="方法 4 优化的 KMP 算法"></a>方法 4 优化的 KMP 算法</h2><blockquote><p>如果读者能够看懂「正确性证明」和「思考题答案」这两部分，那么一定已经发现了方法三中的 KMP 算法有可以优化的地方。即…</p></blockquote><p>阿巴阿巴…</p><h1 id="技术总结"><a href="#技术总结" class="headerlink" title="技术总结"></a>技术总结</h1><p>该题复杂在 2 方面：</p><ol><li>同余运算的正确性证明</li><li>KMP 算法实现字符串匹配（可以调 find()）</li></ol><p>这样的题才 Easy，而另一道每日一题「<a href="https://leetcode-cn.com/problems/shortest-palindrome/" target="_blank" rel="noopener">214.最短回文串</a>」也是调 KMP 算法，就是 Hard，迷惑。</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结 Linux 下 bind cpu/mem 的办法</title>
      <link href="/2020/08/09/%E6%80%BB%E7%BB%93-bind-cpu-mem-%E7%9A%84%E5%8A%9E%E6%B3%95/"/>
      <url>/2020/08/09/%E6%80%BB%E7%BB%93-bind-cpu-mem-%E7%9A%84%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>随着服务器核数越来越多, 跑性能测试时需要限制程序/进程的 <code>CPU/Memory</code> 使用, 本文总结 <strong>Linux 下实现 CPU/Mem BIND 的方法</strong>.</p><p>PS: 查看 CPU 和内存用 <code>htop</code> 命令.</p><a id="more"></a><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>常用工具的介绍</p><h2 id="taskset"><a href="#taskset" class="headerlink" title="taskset"></a>taskset</h2><p>最简单方便的命令, 绑定到 CPU Cores,  参见<code>man taskset</code></p><blockquote><p>taskset - set or retrieve a process’s CPU affinity</p></blockquote><p>使用示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskset -c 0 &lt;my-command-line&gt; <span class="comment"># 限制在 Core 0 上</span></span><br></pre></td></tr></table></figure><h2 id="numactl"><a href="#numactl" class="headerlink" title="numactl"></a>numactl</h2><p>仅适用于有 NUMA 的系统,  用于控制 处理器 和 内存 的使用,  参见 <code>man numactl</code></p><blockquote><p>numactl - Control NUMA policy for processes or shared memory</p><p><strong>—membind=nodes, -m nodes</strong><br>Only allocate memory from nodes. Allocation will fail when there is not enough memory available on these nodes. <em>nodes</em> may be specified as noted above.</p><p><strong>—localalloc, -l</strong><br>Falls back to the system default which is local allocation by using <em>MPOL_DEFAULT</em> policy. See <em><a href="https://www.systutorials.com/docs/linux/man/2-mbind/" target="_blank" rel="noopener">mbind</a>(2)</em> for details.</p><p><strong>—interleave=nodes, -i nodes</strong><br>Set a memory interleave policy. Memory will be allocated using round robin on <em>nodes.</em> When memory cannot be allocated on the current interleave target fall back to other nodes. Multiple nodes may be specified on —interleave, —membind and —cpunodebind.</p></blockquote><p>使用示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numactl --localalloc --cpunodebind=4 &lt;my-command-line&gt; <span class="comment"># 绑定到第 4 个 NUMA NODE, 使用该 NODE 上的内存</span></span><br><span class="line">numactl --membind=4 --cpunodebind=4 &lt;my-command-line&gt; <span class="comment"># 绑定到第 4 个 NUMA NODE, 使用该 NODE 上的内存</span></span><br><span class="line">numactl --interleave=0-3 &lt;my-command-line&gt; <span class="comment"># 使用第 0-3 NODE 上的内存</span></span><br></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/54566354" target="_blank" rel="noopener">关于 NUMA</a></p><h2 id="CGroup"><a href="#CGroup" class="headerlink" title="CGroup"></a>CGroup</h2><p>创建相应的 cpuset,  描述好对应的 cpus 以及 mems</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分组</span></span><br><span class="line">cgcreate -g cpuset,memory:my1</span><br><span class="line"><span class="comment"># 设置限制使用cpu   0</span></span><br><span class="line">cgset -r cpuset.cpus=0 my1</span><br><span class="line"><span class="comment"># 设置限制使用的内存条</span></span><br><span class="line">cgset -r cpuset.mems=0 my1</span><br><span class="line"><span class="comment"># 设置限制内存最大使用大小,这里单位是byte,这里限制最多用512M</span></span><br><span class="line">cgset -r memory.limit_in_bytes=524288000  my1</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">cgexec  -g cpuset,memory:/my1 &lt;my-commad-line&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/easton-wang/p/7656205.html" target="_blank" rel="noopener">关于 CGroup</a></p><h1 id="代码中设置-Affinity"><a href="#代码中设置-Affinity" class="headerlink" title="代码中设置 Affinity"></a>代码中设置 Affinity</h1><p>在代码中限制进程和线程的使用</p><h2 id="pthread"><a href="#pthread" class="headerlink" title="pthread"></a>pthread</h2><p>曾经在代码中写过,  限制 pthread 线程使用的 cpus,  调用的是<code>pthread_setaffinity_np</code>: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">linux_cpubind</span><span class="params">(<span class="keyword">int</span> processor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">cpu_set_t</span> cpuset;</span><br><span class="line">    <span class="keyword">pthread_t</span> thread;</span><br><span class="line">    thread = pthread_self();</span><br><span class="line">    CPU_ZERO(&amp;cpuset);</span><br><span class="line">    CPU_SET(processor, &amp;cpuset);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pthread_setaffinity_np(thread, <span class="keyword">sizeof</span>(<span class="keyword">cpu_set_t</span>), &amp;cpuset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是 C 代码,  C++代码包装了 <code>std::thread</code>,  代码如下(<a href="https://stackoverflow.com/a/57620568" target="_blank" rel="noopener">更多</a>):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::thread&gt; <span class="title">threads</span><span class="params">(num_threads)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; num_threads; ++i) &#123;</span><br><span class="line">    threads[i] = <span class="built_in">std</span>::thread([i] &#123;</span><br><span class="line">    <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::milliseconds(<span class="number">900</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a cpu_set_t object representing a set of CPUs. Clear it and mark</span></span><br><span class="line">    <span class="comment">// only CPU i as set.</span></span><br><span class="line">    <span class="keyword">cpu_set_t</span> cpuset;</span><br><span class="line">    CPU_ZERO(&amp;cpuset);</span><br><span class="line">    CPU_SET(i, &amp;cpuset);</span><br><span class="line">    <span class="keyword">int</span> rc = pthread_setaffinity_np(threads[i].native_handle(),</span><br><span class="line">                                    <span class="keyword">sizeof</span>(<span class="keyword">cpu_set_t</span>), &amp;cpuset);</span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Error calling pthread_setaffinity_np: "</span> &lt;&lt; rc &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自制 Typora 紫色主题</title>
      <link href="/2020/08/02/%E8%87%AA%E5%88%B6-Typora-%E7%B4%AB%E8%89%B2%E4%B8%BB%E9%A2%98/"/>
      <url>/2020/08/02/%E8%87%AA%E5%88%B6-Typora-%E7%B4%AB%E8%89%B2%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><a href="https://theme.typora.io/theme/Purple/" target="_blank" rel="noopener">Typora官网链接: Purple Theme</a></p><p> <a href="https://github.com/hliu202/typora-purple-theme.git" target="_blank" rel="noopener">github 下载地址</a> (这也是第一个获得Star的原创项目)，<a href="https://zhuanlan.zhihu.com/p/165151336" target="_blank" rel="noopener">知乎链接</a> (第一篇原创文章)</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>是一款支持实时预览的 Markdown 编辑器和阅读器，支持<code>Windows</code>、<code>macOS</code>、<code>Linux</code>三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。</p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><ol><li><a href="https://github.com/hliu202/typora-purple-theme" target="_blank" rel="noopener">下载</a>本主题中的<code>purple.css</code>文件；</li><li>打开 Typora，点击“<strong>偏好设置</strong>” =&gt; “<strong>打开主题文件夹</strong>”按钮，将弹出 Typora 的主题文件夹；</li><li>将下载好的<code>purple.css</code>放到 Typora 的主题文件夹中；</li><li>关闭并重新打开 Typora，从菜单栏中选择 “<strong>主题</strong>” =&gt; “<strong>Purple</strong>” 即可。</li></ol><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/2020/08/02/%E8%87%AA%E5%88%B6-Typora-%E7%B4%AB%E8%89%B2%E4%B8%BB%E9%A2%98/1.png" alt></p><p><img src="/2020/08/02/%E8%87%AA%E5%88%B6-Typora-%E7%B4%AB%E8%89%B2%E4%B8%BB%E9%A2%98/2.png" alt></p><h2 id="技术总结"><a href="#技术总结" class="headerlink" title="技术总结"></a>技术总结</h2><ol><li>Typora通过自定义 <code>css style</code> 来定制主题</li><li>通过Typora Devtool （类似Chrome Debug）来查看 <code>css element</code> 和预览效果</li><li>了解 css 格式，基本功能及定义</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/blinkfox/typora-vue-theme" target="_blank" rel="noopener">typora-vue-theme</a></p><p><a href="https://github.com/aCluelessDanny/typora-theme-ursine" target="_blank" rel="noopener">typora-theme-ursine</a></p><p><a href="https://github.com/theigrams/My-typora-themes" target="_blank" rel="noopener">theigrams/My-typora-themes</a></p><p><a href="http://downgoon.com/2018/07/Typora样式研究/" target="_blank" rel="noopener">Typora样式研究</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高中数学-4-排列组合</title>
      <link href="/2020/06/25/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6-4-%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
      <url>/2020/06/25/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6-4-%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>学习知乎专栏：<a href="https://zhuanlan.zhihu.com/c_1145370954870927360" target="_blank" rel="noopener">兴趣使然的数学基础讲义</a> </p><blockquote><p>基础概念学扎实就没有解不出的题</p></blockquote><a id="more"></a><h2 id="乘法原理与加法原理"><a href="#乘法原理与加法原理" class="headerlink" title="乘法原理与加法原理"></a>乘法原理与加法原理</h2><p>如果完成一件事需要<strong>n个步骤</strong>，第1步有 m<sub>1</sub> 种不同的方法，第2步有 m<sub>2</sub> 种不同的方法， ……，第n步有 m<sub>n</sub> 种不同的方法，那么完成这件事共有:</p><blockquote><p>N = m<sub>1</sub> * m<sub>2</sub> * … * m<sub>n</sub> 种不同的方法</p></blockquote><p>如果完成一件事需要<strong>n类方法</strong>，第1类方法中有 m<sub>1</sub> 种不同的方法，第2类方法中有 m<sub>2</sub> 种不同的方法， ……，第n类方法中有 m<sub>n</sub> 种不同的方法，那么完成这件事共有:</p><blockquote><p>N = m<sub>1</sub> + m<sub>2</sub> + … + m<sub>n</sub> 种不同的方法</p></blockquote><h2 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h2><p>从 n 个不同元素中取出 m 个元素的所有排列的个数叫作：</p><blockquote><p>从 n 个不同元素中取出 m 个元素的排列数。</p></blockquote><script type="math/tex; mode=display">A_n^m = n * (n - 1) * ... * (n - m + 1)</script><p>原理：每确定1个位置可选元素就少1，再利用乘法原理（排列的核心）</p><p>性质1:</p><script type="math/tex; mode=display">A_n^m = \frac {n!} {(n-m)!}</script><p>性质2：</p><script type="math/tex; mode=display">A_{n+1}^{n+1} = (n + 1)*A_n^n</script><p>性质3：</p><script type="math/tex; mode=display">A_n^{n-1} = A_n^n = n!</script><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>从n个不同元素中取出m个元素的所有组合的个数，叫作：</p><blockquote><p>从n个不同元素中取出m个元素的组合数。</p></blockquote><script type="math/tex; mode=display">C_n^m = \frac {A_n^m} {A_m^m} = \frac {n!} {[(n-m)!*m!]}</script><p>原理：</p><ol><li>先做n选m的排列</li><li>对于选出的m个元素，他们的全排列在组合中是没有区别，只算1种组合，把重复的消去</li></ol><p>性质1：互补</p><script type="math/tex; mode=display">C_n^m=C_n^{n-m}</script><p>性质2：组合恒等式</p><script type="math/tex; mode=display">C_n^m + C_n^{m-1} = C_{n+1}^m</script><p>证明性质2：</p><ol><li>情况1（有X）：先从n+1中选X，剩下的n个中选m-1个</li><li>情况2（没有X）：不选X，从剩下的n个中选m个</li><li>两种情况相加</li></ol><h2 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h2><p>对于 (a + b)<sup>n</sup> 的展开式是什么样的？</p><p>(a + b)<sup>n</sup> = (a + b) <em> (a + b) </em> … * (a + b)，展开后有 2<sup>n</sup> 项，再加上重复的</p><p>对于 a<sup>m</sup>*b<sup>n-m</sup>，系数是多少（有多少个）？它有m个a，从n个(a+b)中选m个贡献a (选b也一样，互补性），共有多少种组合？</p><p>因此：</p><script type="math/tex; mode=display">(a+b)^n=C_n^0a^n + C_n^1a^{n-1}b + ... + C_n^ma^{n-m}b^m + ... + C_n^nb^n</script><p>(a - b)<sup>n</sup> 类似，看做(-b)</p><p>性质：</p><script type="math/tex; mode=display">C_n^0 + C_n^1+...+C_n^{n-1}+C_n^n = 2^n</script><p>求和符号</p><script type="math/tex; mode=display">\sum_{i=0}^n C_n^ia^{n-i}b^i</script>]]></content>
      
      
      <categories>
          
          <category> math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高中数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高效能人士的七个习惯》读书笔记</title>
      <link href="/2020/06/13/7-habits-of-highly-effective-people/"/>
      <url>/2020/06/13/7-habits-of-highly-effective-people/</url>
      
        <content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/5325618/" target="_blank" rel="noopener">《高效能人士的七个习惯》</a>虽然是鸡汤和励志文，读完还是颇有感触。简单概括：如果养成七个高效能习惯？要养成以原则（即七个习惯）为中心的思维模式。</p><blockquote><p>人的行为总是一再重复。因此卓越不是单一的举动，而是习惯。——亚里士多德( Aristotle)</p></blockquote><a id="more"></a><p>习惯的定义：</p><img src="/2020/06/13/7-habits-of-highly-effective-people/Screen Shot 2020-06-13 at 12.00.22.png" alt="Screen Shot 2020-06-13 at 12.00.22" style="zoom:67%;"><p>七个习惯：</p><img src="/2020/06/13/7-habits-of-highly-effective-people/7 habits.png" alt="7 habits" style="zoom: 50%;"><h1 id="个人领域：独立"><a href="#个人领域：独立" class="headerlink" title="个人领域：独立"></a>个人领域：独立</h1><h2 id="习惯一-积极主动——个人愿景的原则"><a href="#习惯一-积极主动——个人愿景的原则" class="headerlink" title="习惯一 积极主动——个人愿景的原则"></a>习惯一 积极主动——个人愿景的原则</h2><p>积极主动的关注圈和影响圈，将焦点放在影响圈，逐渐扩大影响圈：</p><img src="/2020/06/13/7-habits-of-highly-effective-people/Screen Shot 2020-06-13 at 12.07.25.png" alt="Screen Shot 2020-06-13 at 12.07.25" style="zoom:67%;"><p>影响圈的核心就是<strong>做出承诺与信守诺言</strong>的能力。积极主动的本质和最明白的表现就是对自己或别人有所承诺，然后从不食言。</p><p>掌控人生的途径：一是做出承诺，并信守诺言；二是确立目标，并付诸实践。</p><p>即便只是承诺一件小事，只要<strong>有勇气迈出第一步</strong>，也有助于培育内心的诚信，这表示我们有足够的自制能力、勇气和实力承担更多的责任。一次次做出承诺，一次次信守诺言，终有一天荣誉会超越情绪的力量。</p><p>做出承诺与信守诺言正是<strong>培养高效能习惯的根本力量</strong>。知识、技巧和意愿都位于影响圈内，改善其中任何一项都会改善三者之间的平衡，三者的交集越大，就说明我们对于习惯及其原则的修养越完善，就越能够以崇高的品德实现平衡而高效能的生活。</p><p>积极主动的试验:</p><blockquote><p><strong>学会做照亮他人的蜡烛，而不是评判对错的法官</strong>；</p><p><strong>以身作则，而不是一心挑错</strong>；</p><p><strong>解决问题，而不是制造事端</strong>。</p><p>不要总是怨天尤人或文过饰非，犯了错误，就要马上承认，改正并从中吸取教训，致力于影响圈内的事情，从自我做起。</p><p>对于别人的缺点，不要一味指责。别人是否履行职责并不重要，重要的是自己的态度。如果你一直认为问题“存在于外部”，那么请马上打住，因为这种想法本身就是问题。</p></blockquote><p>语言：</p><ul><li><p>积极：“我可以”，“我能”，“我宁愿”</p></li><li><p>消极：“如果”，“但愿”，“我办不到”，“我不得不”</p></li></ul><h2 id="习惯二-以终为始——自我领导的原则"><a href="#习惯二-以终为始——自我领导的原则" class="headerlink" title="习惯二 以终为始——自我领导的原则"></a>习惯二 以终为始——自我领导的原则</h2><p>任何事物都需要两次创造</p><blockquote><p>我们做任何事都是先在头脑中构思，即智力上的或第一次的创造( Mental/First Creation)</p><p>然后付诸实践，即体力上的或第二次的创造( Physical/Second Creation).</p></blockquote><p>领导( Leadership)不同于管理(Management)。领导是第一次的创造，必须先于管理；管理是第二次的创造，会在第三个习惯中谈到。</p><p>改写人生剧本：成为自己的第一次创造者。</p><p>以原则为中心的个人宣言。</p><h2 id="习惯三-要事第一-——自我管理的原则"><a href="#习惯三-要事第一-——自我管理的原则" class="headerlink" title="习惯三 要事第一 ——自我管理的原则"></a>习惯三 要事第一 ——自我管理的原则</h2><p>时间管理矩阵和四类事务（重要 x 紧急）</p><p>要事（第二类）：重要又不紧迫。包括建立人际关系、撰写使命宣言、规划长期目标、防患于未然等等。人人都知道这些事很重要，却因尚未迫在眉睫，反而避重就轻。</p><img src="/2020/06/13/7-habits-of-highly-effective-people/Screen Shot 2020-06-13 at 12.23.44.png" alt="Screen Shot 2020-06-13 at 12.23.44" style="zoom:50%;"><p>有些人几乎将所有的时间都用在第三和第四类事务（不重要，紧急/不紧急）上，可以说他们过的是一种不负责任的生活。</p><p>勇于说“不”</p><blockquote><p>人各有志，各有优先要务。必要时，应该不卑不亢地拒绝别人，在急迫与重要之间，知道取舍。</p></blockquote><h1 id="公众领域：互赖"><a href="#公众领域：互赖" class="headerlink" title="公众领域：互赖"></a>公众领域：互赖</h1><h2 id="习惯四-双赢思维——人际领导的原则"><a href="#习惯四-双赢思维——人际领导的原则" class="headerlink" title="习惯四 双赢思维——人际领导的原则"></a>习惯四 双赢思维——人际领导的原则</h2><p>利人利己。</p><p>关系很重要。你要以影响圈为核心，通过以礼相待，尊重和欣赏对方及其不同观点来进行感情投资。</p><p>这样你们的交往就得以维持，你有更多的机会聆听和深入了解对方，同时也更勇于表达自己，而不再是被动的，你的潜力和积极性会被激发出来。你的努力最终将让对方相信你希望实现真正的双赢，而交往过程本身就是很棒的投资。</p><p>你对双赢的态度越坚持，越真诚，越积极，越投入，你对他人的影响力就越大。</p><h2 id="习惯五-知彼解己——移情沟通的原则"><a href="#习惯五-知彼解己——移情沟通的原则" class="headerlink" title="习惯五 知彼解己——移情沟通的原则"></a>习惯五 知彼解己——移情沟通的原则</h2><p>知彼解己——先寻求去了解对方，然后再争取让对方了解已。这一原则是进行有效人际交流的关键。</p><p>首先你要有能让他人信任和开怀的人格，在此基础上培养<strong>移情聆听</strong>( Empathic Listening)的技巧，然后建立情感账户来实现心与心的交流。</p><p>“知彼”是交往模式的一大转变，因为我们通常把让别人理解自己放在首位。大部分人在聆听时并不是想理解对方，而是为了做出回应。这种人要么说话，要么准备说话，不断地用自己的模式过滤一切，用自己的经历理解别人的生活。</p><blockquote><p>有一个父亲对我说过：“我不了解我的儿子，他就是不愿意听我说话。”</p><p>我说：“我来重述一下，你说你不了解你的儿子，因为他不愿意听你说话？”</p><p>“是的。”他回答。</p><p>我问：“你是说，<strong>因为孩子不肯听你说话，所以你不了解他？</strong>”</p><p>“对啊。”</p><p>我提示他：“<strong>如果你想明白一个人，那就要听他说话。</strong>”</p></blockquote><p>事实上，大部分人都是这么自以为是。我们的聆听通常有层次之分。</p><ul><li>一是充耳不闻，压根就不听别人说话；</li><li>二是装模作样，“是的！嗯！没错！”</li><li>三是选择接收，只听一部分，通常学龄前儿童的喋喋不休会让我们采取这种方式；</li><li>四是聚精会神，努力听到每一个字。</li><li>但是，很少有人会达到第五个层次，即最高层次——<strong>移情聆听</strong>。</li></ul><p>移情聆听是指以理解为目的的聆听，要求听者站在说话者的角度理解他们的思维模式和感受。</p><p>移情( Empathy)不是同情(Sympathy)。后者是一种认同和判断形式，更适合用来表达感情和做出回应，却容易养成对方的依赖性。移情聆听的本质不是要你赞同对方，而是要在情感和理智上充分而深入地理解对方。</p><p>移情倾听不只是理解个别的词句而已。据专家估计，人际沟通仅有10%通过语言来进行，30%取决于语调与声音，其余60%则得靠肢体语言。所以在移情倾听的过程中，不仅要耳到，还要眼到、心到；用眼睛去观察，用心灵去体会。</p><h2 id="习惯六-统合综效——创造性合作的原则"><a href="#习惯六-统合综效——创造性合作的原则" class="headerlink" title="习惯六 统合综效——创造性合作的原则"></a>习惯六 统合综效——创造性合作的原则</h2><p>统合综效的精髓就是<strong>判断和尊重差异，取长补短</strong>。男女和夫妻间的生理差异显而易见，那么社会、智力和情感方面的差异呢？不是也可以创造出新的生活形态和环境吗？它能让每一个人都能够真正实现自我，自尊自强，有机会完成从依赖到独立，再到相互依赖的成熟过程。</p><p>所谓统合综效的沟通，是指敞开胸怀，接纳一切奇怪的想法，同时也贡献自己的浅见。</p><img src="/2020/06/13/7-habits-of-highly-effective-people/Screen Shot 2020-06-13 at 12.40.48.png" alt="Screen Shot 2020-06-13 at 12.40.48" style="zoom: 50%;"><h1 id="自我提升和完善"><a href="#自我提升和完善" class="headerlink" title="自我提升和完善"></a>自我提升和完善</h1><h2 id="习惯七-不断更新——-衡的自我更新的原则"><a href="#习惯七-不断更新——-衡的自我更新的原则" class="headerlink" title="习惯七 不断更新——-衡的自我更新的原则"></a>习惯七 不断更新——-衡的自我更新的原则</h2><p>人生最值得的投资就是锻炼自己，因为生活与服务人群都得靠自已，这是最珍贵的工具。</p><p>工作本身并不能带来经济上的安全感，具备良好的思考、学习、创造与适应能力，才能利于不败之地。拥有财富，并不代表经济独立，拥有创造财富的能力才真正可靠。</p><p>自我提升和完善的四个层面：</p><img src="/2020/06/13/7-habits-of-highly-effective-people/Screen Shot 2020-06-13 at 12.41.49.png" alt="Screen Shot 2020-06-13 at 12.41.49" style="zoom:50%;"><p>身体层面指有效呵护我们的身体（强化个人愿景，习惯一）——健康饮食，充足休息以及定期锻炼。</p><blockquote><p><strong>锻炼</strong>属于第二类事务，但是由于不具紧迫性，所以很少人能坚持不懈，结果终有一天我们会发现自己陷入了第一类事务，不得不面对健康问题和危机，而原因正是之前对锻炼的忽视。</p></blockquote><p>精神层面的更新为你指引人生方向（强化自我领导，习惯二）。</p><blockquote><p><strong>精神层面</strong>是人的本质、核心和对价值体系的坚持，是生活中非常私人而又至关重要的领域。它能够调动人体内具有<strong>激励和鼓舞</strong>作用的资源，把你同所有人类的永恒真理紧紧联系在一起。在这一点上人们的做法迥异。</p></blockquote><p>智力层面（强化自我管理，习惯三）。我们大多数人的智力发育和学习习惯都源自正规教育。但是，一旦脱离了学校的训导，许多人的头脑就会退化：不再<strong>认真读书</strong>，不再<strong>探索身外的新世界</strong>，不再<strong>用心思考</strong>，也不再写作，至少是不再<strong>重视写作</strong>，不再把它当做考验我们<strong>准确、扼要表达自己的能力</strong>的方式。</p><blockquote><p>相反，我们把时间花在了看电视上。如果大家<strong>放下防御和竞争心态</strong>，就会一致承认沉溺于肥皂剧或某个特定节目是一种<strong>病态的依赖行为</strong>。如果想对电视节目做出明智选择，就要借助习惯三。</p></blockquote><p>社会／情感层面</p><blockquote><p>身体、精神和智力层面与习惯一、二、三密切相关，围绕着个人愿景、自我领导和自我管理的原则。而社会／情感层面的重点则是习惯四、五、六，围绕着人际领导、移情交流和创造性合作的原则。</p></blockquote><p>人生的四个层面休戚相关：身体健全有助于心智发展，精神提升有益于人际关系的圆满。因此，平衡才能产生最佳的整体效果。</p><p>本书的七个习惯也唯有在身心平衡的状态下效果最佳，因为每个习惯之间，都存在着密不可分的关系。</p><p>越是积极主动（习惯一），就越能在生活中有效地实施自我领导（习惯二）和管理（习惯三）；越是有效管理自己的生活（习惯三），就能从事越多的第二类事务的更新活动（习惯七）；越能先理解别人（习惯五），就越能找到统合综效的双赢解决方案（习惯四和习惯六）；越是改善培养独立性的习惯（习惯一、二、三），就越能在相互依赖的环境下提高效能（习惯四、五、六）；而自我更新则是强化所有这些习惯的过程（习惯七）。</p><p><strong>良性循环</strong>：必须学习、坚持、实践，并沿着螺旋式上升的路线不断提高实践的层次。如果以为做到一项就已足够，完全是在自欺欺人。为了不断进步，我们必须学习、坚持、实践——再学习、再坚持、再实践…．付诸行动</p><img src="/2020/06/13/7-habits-of-highly-effective-people/Screen Shot 2020-06-13 at 13.03.00.png" alt="Screen Shot 2020-06-13 at 13.03.00" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科普 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高中数学 3：幂（指数）和对数</title>
      <link href="/2020/06/06/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6-3-%E5%B9%82/"/>
      <url>/2020/06/06/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6-3-%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<p>学习知乎专栏：<a href="https://zhuanlan.zhihu.com/c_1145370954870927360" target="_blank" rel="noopener">兴趣使然的数学基础讲义</a> </p><blockquote><p>基础概念学扎实就没有解不出的题</p></blockquote><a id="more"></a><h2 id="幂"><a href="#幂" class="headerlink" title="幂"></a>幂</h2><p>乘法 类比</p><blockquote><p>a*b</p></blockquote><p>a 叫<strong>乘数</strong>，b 叫<strong>被乘数</strong>，结果叫 <strong>a 与 b 的积</strong>，表示 <strong>b 个 a 相加</strong>(a+a…+a)</p><p>幂运算表示若干个相同的数相乘(a*a…*a)：</p><blockquote><p>a<sup>b</sup> 也写作 a^b</p></blockquote><p>表示 <strong>b 个 a 相乘</strong>，a 叫<strong>底数</strong>，b 叫<strong>指数</strong>，结果叫作<strong>a的b次幂</strong>。</p><h3 id="幂的运算"><a href="#幂的运算" class="headerlink" title="幂的运算"></a>幂的运算</h3><p>幂的相乘</p><blockquote><p>a<sup>m</sup>*a<sup>n</sup> = a<sup>m+n</sup></p></blockquote><p>幂的幂</p><blockquote><p>(a<sup>m</sup>)<sup>n</sup> = a<sup>mn</sup> </p></blockquote><p>幂的相除</p><blockquote><p>a<sup>m</sup> / a<sup>n</sup> = a<sup>m-n</sup>  (m≥n，a≠0）</p></blockquote><p>幂的展开</p><blockquote><p>(ab)<sup>m</sup> = a<sup>m</sup>b<sup>m</sup></p></blockquote><p>当指数为0</p><blockquote><p>a<sup>0</sup> = 1</p></blockquote><p>表示有0个a相乘，任何数与0个其他数相乘(也就是不合其他数相乘)，还是它本身，相当于乘了个1</p><blockquote><p>b*a<sup>0</sup> = b*1，所以a<sup>0</sup> 不能是 0</p><p>a<sup>m</sup> / a<sup>m</sup> = a<sup>0</sup>，也有意义</p></blockquote><p>当指数为负数</p><blockquote><p>a<sup>-m</sup> = 1 / a<sup>m</sup> = a<sup>0</sup> / a<sup>m</sup> </p></blockquote><p>当指数为分数</p><blockquote><p>a<sup>1/m</sup></p><p>(a<sup>1/m</sup>)<sup>m</sup> = b <sup>m</sup> ,  then  b<sup>m</sup> = a, then b = <sup>m</sup>√a</p></blockquote><h2 id="指数函数"><a href="#指数函数" class="headerlink" title="指数函数"></a>指数函数</h2><blockquote><p>f(x) = a<sup>x</sup></p></blockquote><h3 id="单调性"><a href="#单调性" class="headerlink" title="单调性"></a>单调性</h3><blockquote><p>a&gt;1时，增函数：当 x&lt;0时，0＜f(x)＜1，当x=0时，f(x)=1，当x＞0时，f(x)＞1</p><p>0＜a＜1时， 减函数：当x＜0时，f(x)＞1，当x=0时，f(x)=1，当x＞0时，0＜f(x)＜1</p></blockquote><p>类比：</p><p>在加法里，0个a相加的结果是0，任何数加上正数（大于零的数）会变大，任何数加上负数（比零小的数）会变小。</p><blockquote><p>类比 f(x) = Ax</p></blockquote><p>在乘法里，0个a相乘的结果是1，任何数乘以大于1的数会变大，任何数乘以比1小（比0大）的数会变小。</p><blockquote><p>类比 f(x) = a<sup>x</sup></p></blockquote><h3 id="对称性"><a href="#对称性" class="headerlink" title="对称性"></a>对称性</h3><p>单个指数函数，既不是奇函数也不是偶函数，但两个指数函数之间有对称性</p><p>对任意 a &gt; 0，f(x) = a<sup>x</sup> 与 g(x) = (1/a)<sup>x</sup> 关于 y 轴镜面对称</p><p><img src="/2020/06/06/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6-3-%E5%B9%82/v2-2c56db78771c40f15d51a799fecd640b_1440w-20200606115333197.jpg" alt="img"></p><p>类比：</p><p>对于一次函数f(x)=ax 和 g(x)=-ax，它们的值是互为相反数的，f(-x)=g(x)</p><p>对于 f(x) = a<sup>x </sup>和 g(x) = a<sup>-x</sup> ，对相同的x，它们的值是互为倒数的，对互为相反数的x和-x，它们的值是相同的，它们两的图像关于y轴对称，且都过点（0，1）</p><h3 id="界限"><a href="#界限" class="headerlink" title="界限"></a>界限</h3><p>当 m &gt; 0 时，无论是对 a 开方，还是 a 越乘越多：</p><p>当底数a＞1时，a<sup>m</sup> 恒大于 1，比如 1.001<sup>2</sup> &gt; 1，<sup>2</sup>√1.001 &gt; 1</p><p>当底数0 &lt; a &lt; 1时，a<sup>m</sup> 恒小于 1</p><p>当 m &lt; 0 时</p><p>当底数a＞1时，a<sup>m</sup> 恒小于 1</p><p>当底数0 &lt; a &lt; 1时，a<sup>m</sup> 恒大于 1</p><p>类比：</p><p>对于加法，一个数（≠0）乘以-1就会得到它的相反数，正数变负数，负数变正数。</p><p>对于乘法，一个数（＞0）去除1（或者说用1去除以它）会得到它的倒数，比1大的数的倒数比1小，比1小的数的倒数比1大。</p><h2 id="对数"><a href="#对数" class="headerlink" title="对数"></a>对数</h2><p>对于已知底数a和它的幂N，倒过来求指数的运算叫作对数运算，这个运算（对数）记作</p><blockquote><p>log<sub>a</sub>N</p><p>读作“<strong>以a为底N的对数</strong>”，在这里a依然叫作“<strong>底数</strong>”，N叫作“<strong>真数</strong>”。</p><p>a<sup>b </sup>= N =&gt; b = log<sub>a</sub>N</p></blockquote><h3 id="运算法则"><a href="#运算法则" class="headerlink" title="运算法则"></a>运算法则</h3><p>加法：log<sub>a</sub>M + log<sub>a</sub>N = log<sub>a</sub>(M*N)</p><p>减法：log<sub>a</sub>M - log<sub>a</sub>N = log<sub>a</sub>(M/N)</p><p>取幂：log<sub>a</sub>M<sup>n</sup> = nlog<sub>a</sub>M </p><p>换底公式：log<sub>a</sub>b = log<sub>c</sub>b / log<sub>c</sub>a</p><h3 id="自然对数的底"><a href="#自然对数的底" class="headerlink" title="自然对数的底"></a>自然对数的底</h3><p>e = lim (1 + 1/n)<sup>n</sup>   n -&gt; ∞</p><p>写作：ln</p><p>10 为底的对数写作：lg</p><h3 id="对数函数"><a href="#对数函数" class="headerlink" title="对数函数"></a>对数函数</h3><p>红色： f(x) = log<sub>2</sub>x 蓝色：g(x) = log<sub>1/2</sub>x</p><p><img src="/2020/06/06/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6-3-%E5%B9%82/v2-1d69ba2588d64e1ffa0627a857222ed1_b.jpg" alt="img"></p><p>单调性：底 a 为 (0,1) 和 a &gt; 1时</p><p>对称性：a 和 1/a 为底，关于 x 轴对称</p><p>逆函数：对数函数 f(x) = log<sub>2</sub>x 与指数函数 g(x) = 2<sup>x</sup> 互为逆函数（a＞0，a≠1）</p><p><img src="/2020/06/06/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6-3-%E5%B9%82/v2-dcc59613281cbd93e5a219dcc16fe46f_b.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高中数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高中数学 2：函数</title>
      <link href="/2020/06/04/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6-2-%E5%87%BD%E6%95%B0/"/>
      <url>/2020/06/04/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6-2-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>学习知乎专栏：<a href="https://zhuanlan.zhihu.com/c_1145370954870927360" target="_blank" rel="noopener">兴趣使然的数学基础讲义</a> </p><blockquote><p>基础概念学扎实就没有解不出的题</p></blockquote><a id="more"></a><h2 id="函数初步"><a href="#函数初步" class="headerlink" title="函数初步"></a>函数初步</h2><p>定义域</p><p>对应法则，即对应关系</p><p>值域</p><p>列函数，函数的复合 <code>f(g(x))</code></p><p>函数图像</p><h3 id="函数的性质"><a href="#函数的性质" class="headerlink" title="函数的性质"></a>函数的性质</h3><p><strong>单调性</strong>：增函数和减函数。单纯的增函数和减函数比较少见，但函数往往会在某个区间里是单调递增或递减的。</p><p><strong>对称性</strong>：</p><blockquote><p>奇函数的图像关于原点中心对称。f(-x)=-f(x)</p><p>偶函数的图像关于y轴镜面对称。f(-x)=f(x)</p></blockquote><p>奇/偶函数的相加和相乘，类比正数和负数。</p><p>逆函数</p><blockquote><p>对函数f(x)如果有函数g(y)满足，对f(x)上的每个点（x，y）都有g(y)=x，那么g(x)叫做f(x)的逆函数。f(x)的逆函数也记作f<sub>-1</sub>(x)。</p></blockquote><p>重要性质为：f<sub>-1</sub>(f(x)）=x</p><p><strong>周期性</strong></p><blockquote><p>对函数f(x)（通常其定义域为实数集R），如果存在某个不为0的常数T，使得任意的f(x+T)=f(x), 则f(x)是以T为周期的函数。</p></blockquote><h2 id="一次函数"><a href="#一次函数" class="headerlink" title="一次函数"></a>一次函数</h2><p>一元一次方程</p><blockquote><p>Ax+B=0</p><p>x是未知数，A、B是已知数，且A≠0</p></blockquote><p>一次函数</p><blockquote><p>f(x)=Ax+B</p></blockquote><p>定义域 通常为全实数域</p><p>函数图像 是直线</p><p>截距：</p><blockquote><p>与x轴相交于点（-B/A，0）， -B/A叫作f(x)在x轴上的截距</p><p>与y轴相交于点（0，B），B叫作f(x)在y轴上的截距</p></blockquote><p>斜率</p><blockquote><p>A叫作直线的斜率</p></blockquote><p>单调性: 当 A 为正/负时，增/减函数</p><p>对称性（红线为f(x)=2x-2，黄线为f(x)=-2x-2）</p><p><img src="/2020/06/04/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6-2-%E5%87%BD%E6%95%B0/v2-8309f5389e7ff8df84f3333efef03f27_b.jpg" alt="img"></p><p>逆函数</p><p><img src="/2020/06/04/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6-2-%E5%87%BD%E6%95%B0/v2-ee0c3d1768b5032cf7eaf315b90680be_b.jpg" alt="img"></p><h2 id="二次函数"><a href="#二次函数" class="headerlink" title="二次函数"></a>二次函数</h2><p>二次方程</p><blockquote><p>Ax<sup>2</sup> + Bx + C = 0</p></blockquote><p>解方程：</p><ol><li>凑多项式</li><li>凑平方</li><li>求根公式</li></ol><p>二次函数</p><blockquote><p>f(x) = Ax<sup>2</sup> + Bx + C</p><p>另一种形式： f(x) = A(x-P)<sup>2</sup> + Q</p></blockquote><p>单调性：</p><blockquote><p>当x＞P时，x-P＞0</p><p>当x＜P时，x-P＜0</p><p>当 A &gt; 0时，函数在（-∞，p）上递减，在（p，+∞）上递增 …</p></blockquote><p>最大值/最小值为 Q</p><p>对称性</p><blockquote><p>对称轴x=P，函数图像关于直线x=P镜面对称</p></blockquote><p>平移变换（水平移动，垂直移动，开口方向，胖瘦）： A, P, Q</p><p>函数 f(x) = x<sup>2</sup> + x -2, 图像（与 x 和 y 轴交点为方程解）</p><p><img src="/2020/06/04/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6-2-%E5%87%BD%E6%95%B0/v2-1f457aaec22cc2dc4fe343d9350beaeb_b.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高中数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高中数学 1：命题与集合</title>
      <link href="/2020/06/04/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6-1-%E5%91%BD%E9%A2%98%E4%B8%8E%E9%9B%86%E5%90%88/"/>
      <url>/2020/06/04/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6-1-%E5%91%BD%E9%A2%98%E4%B8%8E%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>学习知乎专栏：<a href="https://zhuanlan.zhihu.com/c_1145370954870927360" target="_blank" rel="noopener">兴趣使然的数学基础讲义</a> </p><blockquote><p>基础概念学扎实就没有解不出的题</p></blockquote><a id="more"></a><h2 id="命题"><a href="#命题" class="headerlink" title="命题"></a>命题</h2><blockquote><p>命题是一种推出（推断）关系，不是陈述、疑问、命令。</p><p>命题可拆分为明确且独立的“条件”和“结论”两部分，用“如果……那么……”的句式来表达。</p></blockquote><p>逆命题、否命题、逆否命题</p><ul><li><p>原命题和它的逆否命题真假一致</p></li><li><p>原命题和逆命题（以及否命题）的真假无必然联系</p></li></ul><h2 id="充分条件和必要条件"><a href="#充分条件和必要条件" class="headerlink" title="充分条件和必要条件"></a>充分条件和必要条件</h2><p>充分条件</p><blockquote><p>只要有A，就一定能达成B，A是B的充分条件。</p><p>A与其他条件是<strong>并连关系</strong>，即A、C、D….中任意一个存在都可以使得B成立（就像是个人英雄主义）</p></blockquote><p>充分不必要条件</p><blockquote><p>有A，一定能达到B；就算没有A，也有可能达到B</p><p>对于“及格”这件事来说，90分是“<strong>充分条件</strong>”</p></blockquote><p>必要条件</p><blockquote><p>如果能做到B，则必定做到了A，A是B的必要条件</p><p>A与其他条件是<strong>串联关系</strong>，即条件A必须存在，且条件C、D….也全部存在才可能导致B结论。（团结的力量）</p></blockquote><p>必要不充分</p><blockquote><p>如果能做到A，则必定能做到B，但如果只做到B的话，还不够做到A。</p><p>e.g. 某次考试，满分为100分，第一道的分值为41分（或41分以上）</p></blockquote><p>充分必要条件（充要条件）</p><blockquote><p>如果能做到A，则必定能做到B；如果做到了B，则必定能做到A，A、B互为对方的<strong>充要条件</strong>。</p></blockquote><p>既不充分又不必要条件</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><blockquote><p>集合是指一个群体</p></blockquote><p>集合可能有很多个元素，可能有无穷多个元素，也可能只有一个元素，或者没有元素(空集)。</p><p>全集、交集、并集、补集、和集、差集。</p><p>维恩图。</p><p>“包含于”（⊆）是集合间的关系，“属于”（∈）是元素和集合的关系。</p><p>集合元素的个数：card(AUBUC)=card(A)+card(B)+card(C)-card(A∩B)-card(B∩C)-ard(C∩A)+card(A∩B∩C)</p><p>数轴 表示数集的一部分以及数集间的关系</p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><blockquote><p>映射就是两个集合之间的对应关系</p></blockquote><p>B里的每个元素，都被A中的元素所对应，叫做<strong>满射</strong>。</p><p>B的每个元素只被A的元素唯一对应，或者没有被A中的元素对应，叫做<strong>单射</strong>。</p><p>既是单射又是满射的，叫作<strong>双射</strong>，也叫<strong>一一映射</strong>。</p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><p><a href="https://www.zhihu.com/question/30469121/answer/128807484" target="_blank" rel="noopener">充分条件和必要条件怎么区分 ？ - 暮野的回答 - 知乎</a> </p>]]></content>
      
      
      <categories>
          
          <category> math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高中数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crash Course Computer Science 1 - Hardware 笔记</title>
      <link href="/2020/05/23/cccs-1-hardware/"/>
      <url>/2020/05/23/cccs-1-hardware/</url>
      
        <content type="html"><![CDATA[<p>B 站上的<a href="https://www.bilibili.com/video/BV1EW411u7th" target="_blank" rel="noopener">【计算机科学速成课】- Crash Course Computer Science </a> 翻译做的太好了，每集不到 20 分钟，对于学习：基础知识，历史，或者专业用语都很好。</p><p>本篇是第一个笔记合集，关于计算机硬件方面，有 9 集的内容，标题前的编号对应集数。</p><blockquote><p>It’s not magic, It’s Computer Science</p></blockquote><a id="more"></a><h3 id="1-Early-Computing"><a href="#1-Early-Computing" class="headerlink" title="1. Early Computing"></a>1. <a href="https://www.bilibili.com/video/BV1EW411u7th" target="_blank" rel="noopener">Early Computing</a></h3><p>早期计算相关的历史：abacus 算盘，mathematical tables 计算表</p><p>Charles Babbage -&gt; difference engine 差分机（多项式），analytical engine 分析机（general purpose computer）</p><p>Herman Hollerith -&gt; tabulating machine 制表机，punch card 打孔纸卡 -&gt; IBM</p><h3 id="2-Electronic-Computing"><a href="#2-Electronic-Computing" class="headerlink" title="2. Electronic Computing"></a>2. Electronic Computing</h3><p><strong>Relay</strong> 继电器: electriccally-controlled mechanical switch</p><ul><li>wear &amp; tear 齿轮磨损</li><li>bug:  Grace Hopper</li></ul><p><strong>Vacuum Tube</strong> (真空管) </p><ul><li>thermionic valve 热电子管：第一个真空管。thermionic emission 热电子发射</li><li>diode 二极管：允许单向电流</li></ul><p><strong>Transister</strong> (晶体管) by <strong>Semiconductor</strong> 半导体</p><h3 id="3-Boolean-logic-and-logic-gate"><a href="#3-Boolean-logic-and-logic-gate" class="headerlink" title="3. Boolean logic and logic gate"></a>3. Boolean logic and logic gate</h3><p><strong>Boolean Algebra</strong> 布尔代数</p><ul><li>values: true/false</li><li>binary representation 二进制: off/on two stats<ul><li>ternary(3), quinary (5)</li></ul></li><li>operations: NOT ANT OR XOR</li></ul><h3 id="4-Representing-numbers-and-letters-in-binary"><a href="#4-Representing-numbers-and-letters-in-binary" class="headerlink" title="4. Representing numbers and letters in binary"></a>4. Representing numbers and letters in binary</h3><p>base-two notation 底为 2 的表达</p><p>a byte = 8-bit</p><p>floating point: IEEE-754, 1 bit sign, 8 bits exponent, 23 bits significand </p><p>ASCII 美国信息交换标准代码: 8bits, a 97, A 65, line charactor</p><p>UNICODE 字符编码标准: 16bits or more</p><h3 id="5-How-computer-calculate-ALU"><a href="#5-How-computer-calculate-ALU" class="headerlink" title="5. How computer calculate - ALU"></a>5. How computer calculate - ALU</h3><p><strong>Arithmetic Unit</strong>: how to build a 8-bits Adder</p><ul><li>Half Adder: 2 bits input (A,B) =&gt; carry and output bit (by Logic Gates XOR, AND)</li><li>Full Adder: 3 bits input (A,B,Carry)</li><li>1 HA + 7 FA</li><li>Carry-Look-Ahead-Adder 超前进位加法器</li></ul><p><strong>Logic Unit</strong></p><ul><li>logical operations</li><li>simple numerical test 数值测试. how to do ZERO test: if any bit is 1</li></ul><p>Operation Code, input A, input B -&gt; Out Data, FLAGS(overflow/carry, zero, negative)</p><h3 id="6-Registers-and-RAM"><a href="#6-Registers-and-RAM" class="headerlink" title="6. Registers and RAM"></a>6. Registers and RAM</h3><p><strong>Gated Latch</strong>: 锁存器 1 bit</p><ul><li><strong>AND-OR</strong> <strong>Latch</strong><ul><li>OR for 1, AND for 0, Plus a NOT</li><li>2 inputs: SET 设置 1, RESET 复位 0</li></ul></li><li>DATA IN, WRITE ENABLE -&gt; DATA OUT</li></ul><p><strong>Register</strong>：寄存器</p><ul><li>a goup of latches</li><li><strong>Width</strong>: the numer of bits</li><li>2 inputs: DATA IN, WRITE ENABLE. 1 output: DATA OUT</li></ul><p><strong>RAM （SRAM)</strong></p><ul><li><strong>16x16  Latch Matrix</strong> 256-BIT memory 门锁矩阵 for <strong>1 bit data</strong><ul><li><strong>Multiplexer</strong> 多路复用器：解码<strong>8-bit address</strong>，定位到单个锁存器 -&gt; 解决WIRE(线路)太多的问题<ul><li>1 WRITE/READ ENABLE</li><li>16 + 16 selection =&gt; 4 + 4 bits address (行 x 列）</li></ul></li></ul></li><li>8 x 16x16-Latch-Matrix for <strong>8 bits data</strong> (Total: 256 bytes)<ul><li>READ/WRITE ENABLE</li><li>8-BIT DATA</li><li>8-BIT ADDRESS IN</li></ul></li><li>1MB 内存条放大：8 x (32 x (4 x (128 x 64bit)))</li></ul><h3 id="7-The-Central-Processing-Unit-CPU"><a href="#7-The-Central-Processing-Unit-CPU" class="headerlink" title="7. The Central Processing Unit  - CPU"></a>7. <a href="https://www.bilibili.com/video/BV1EW411u7th?p=7" target="_blank" rel="noopener">The Central Processing Unit  - CPU</a></h3><p><strong>Control Unit</strong></p><ul><li>Instruction Register: an instruction from RAM</li><li>Instruction Address Register</li><li>decode logic circuits 解码逻辑电路</li><li>交互 RAM <ul><li>read/write enable</li><li>address input</li></ul></li><li>交互 Data Registers</li></ul><p>ALU</p><p><strong>Clock</strong></p><ul><li>Phases<ul><li><strong>Fetch</strong></li><li><strong>Decode</strong>: check instruction kind</li><li><strong>Execute</strong></li></ul></li><li><strong>Clock Speed 时钟周期</strong>: each step in 1 phase<ul><li>1 <strong>Hertz</strong> 频率单位 1 step/second: 1 GHz -&gt; 1 billions of inst per sec</li><li><strong>Overlocking</strong> and <strong>Underlocking</strong> 超频和降频</li></ul></li></ul><h3 id="9-Advanced-CPU-Design"><a href="#9-Advanced-CPU-Design" class="headerlink" title="9. Advanced CPU Design"></a>9. Advanced CPU Design</h3><p>More Instructions</p><ul><li><strong>Instruction Length</strong><ul><li>Increase</li><li>Variable</li></ul></li><li>a <strong>complexity-for-speed</strong> tradeoff</li><li>Instruction Set Extension: MMX, 3DNOW, SSE</li></ul><p><strong>Cache</strong></p><ul><li><strong>Data Locality</strong></li><li><strong>Cache Line</strong></li><li><strong>Cache Hit</strong> &amp; <strong>Cache Miss</strong></li><li>Dirty bit**: Cache Coherence</li></ul><p><strong>Instruction Pipelining</strong> and Parallelize</p><ul><li>dry + wash machine</li><li>fetch + decode + execute<ul><li>triplize: one instruction every single cycle vs 3 cycles</li></ul></li><li>2 hazard<ul><li><strong>Data Dependencies</strong> and pipeline stall -&gt; out-of-order execution: dynamically <strong>reorder</strong> instructions with dependences</li><li><strong>Conditional Jump Instructions</strong> and speculative execution -&gt; <strong>Branch Prediction</strong>: guess the cond value</li></ul></li></ul><p><strong>Superscalar</strong> CPU</p><ul><li>multiple ALU, etc</li><li>execute several instructions at once</li></ul><p><strong>Multiple Core Processors</strong></p><ul><li>several stream of instructions</li><li>share cache, etc</li></ul><p><strong>Multiple Independent CPUs</strong></p><h3 id="17-Integrated-Circuits-amp-Moore’s-Law"><a href="#17-Integrated-Circuits-amp-Moore’s-Law" class="headerlink" title="17. Integrated Circuits &amp; Moore’s Law"></a>17. <a href="https://www.bilibili.com/video/BV1EW411u7th?p=17" target="_blank" rel="noopener">Integrated Circuits &amp; Moore’s Law</a></h3><p>Tyranny of Numbers 数字暴政</p><ul><li>discret component: more connections and tangled wires</li><li>vacuum -&gt; transister</li></ul><p><strong>IC</strong> 集成电路</p><ul><li>package up underlying complexity</li><li>Robert Noyce (Fairchild Semiconductor)<ul><li>germanium 锗 -&gt; silicon 硅</li><li>father of modern ICs</li><li>创建 intel (<strong>int</strong>egrated + <strong>el</strong>ectronics)</li></ul></li></ul><p><strong>PCB</strong> (Printed Circuit Boards) 印刷电路板</p><ul><li>metal wires etched into them and connect components together</li><li>PCB s+ ICs instead of discrete components. triple win: smaller, cheaper, reliable</li></ul><p><strong>Photolithography</strong> 光刻机，如何做出一个 transistor</p><ul><li><p>use light to transer complex patterns to a material (like a semiconductor)</p></li><li><p>materials</p><ul><li><strong>Silicon Wafer</strong> 晶圆: base</li><li><strong>Oxide Layer</strong> 氧化层: be etched by acid</li><li><strong>Photoresist</strong> 光刻胶: can be washed away with special chemical</li><li><strong>Photomask</strong> 光掩膜: contains a pattern to be transferred onto the wafer</li></ul></li><li><p>第一轮蚀刻 1st round of etch</p><ul><li><p>light etch</p></li><li><p>acid: expose some Wafer areas</p><ul><li>etch the Oxide Layer<ul><li>wash away Photomask, </li><li>special chemical: wash left Photresist</li></ul></li></ul></li><li><p>Doping 掺杂: 改变 silicon 的导电性</p><ul><li>high temperature gas: Phosphorus 磷</li></ul></li></ul></li><li><p>第 n 轮蚀刻 Next round: a little region nested inside the 1st round</p></li><li><p>最后一轮 <strong>metalization</strong> (wire): chanels in the oxide layer</p><ul><li>a thin layer of metal (aluminum or copper) on oxide layer</li></ul></li><li><p>bipolar junction transister 双极型晶体管, resistor 电阻 capacitor 电容</p></li></ul><p>3.0 generation of computing</p><ul><li><strong>micro-chip</strong></li><li><strong>micro-processor</strong></li><li><strong>VLSI</strong> (very-large-scale-integration) 超大规模集成 软件</li><li>14nm 比人的血红细胞小 400倍</li><li>iphone7 A10 CPU: 3.3 billion transistors</li></ul><p>Moore’s Law</p><ul><li>Wavelength of light 更小波长的光</li><li>Quantum Tunneling 量子隧穿效应</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业 </tag>
            
            <tag> CCCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 小结</title>
      <link href="/2020/05/16/leetcode-summary/"/>
      <url>/2020/05/16/leetcode-summary/</url>
      
        <content type="html"><![CDATA[<p>最近开始做 <a href="https://leetcode-cn.com/" target="_blank" rel="noopener">LeetCode</a>，也参加了 2 次周赛，总结下遇到的问题和套路。</p><a id="more"></a><h1 id="套路"><a href="#套路" class="headerlink" title="套路"></a>套路</h1><p>编程语言用的 <code>Python3</code>，非常简洁高效，提升积极性。毕竟算法题重在思路，不能被 C/C++和 Java 那冗长的语法分心。</p><p>另外用了 <code>VSCode</code>写代码和调试，方便灵活，写好后再 copy 到官网页面上提交。</p><p>后面就是要多做题了，总结经验，慢慢开始熟练了，跟解数学题一样。</p><h2 id="想好再写"><a href="#想好再写" class="headerlink" title="想好再写"></a>想好再写</h2><p>不要看到题就开始写，除非是做过的或者很简单的题目，否则大概率要卡住，边想边写，写一半又要想，最后还是要完全想通了思路，才能做出来。所以要：</p><blockquote><p><strong>理清思路，想好再写</strong>。复杂问题的要打草稿，但也不要没有思路的乱画</p></blockquote><p>在理清思路的过程中，关键是：</p><ul><li><strong>定义要清晰</strong>。比如 f(i,j) 到底是指范围为：<code>[i, j]</code>，还是 <code>[i, j)</code>，还是 <code>(i,  j)</code> 等，一旦模糊概念，大概率会出错。又比如，结果到底是 <code>k - i</code> 还是 <code>k - (i + 1)</code> 等</li><li><strong>活用数据结构</strong>：数组，链表，字典，queue，stack，deque。基本上每道题都会用到</li><li>想不出来方法，可以看评论和别人的答案</li></ul><h2 id="相似解法"><a href="#相似解法" class="headerlink" title="相似解法"></a>相似解法</h2><p>虽然还没做多少题，已经发现某些题有相似性的<strong>解法的思路</strong>：比如差值法，动态规划，暴力破解（brute force 不可取）等，总结并归纳主题方便后续。</p><p>比如：</p><ol><li><strong>滑动窗口</strong>：<a href="https://leetcode-cn.com/problems/constrained-subsequence-sum/" target="_blank" rel="noopener">1425. 带限制的子序列和</a> 要用到 <a href="https://leetcode-cn.com/problems/sliding-window-maximum/" target="_blank" rel="noopener">239. 滑动窗口最大值</a>。先做的 1425，看答案也看不懂，就去看的 239 了解什么是<code>滑动窗口</code>，搞懂后再回头来搞 1425。</li><li><strong>前缀表达式</strong>：<a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener">560. 和为 K 的子数组</a> 中的方法，即 <code>sum(i,j) = sum(0,j) - sum(0,i)</code>，可以用到 <a href="https://leetcode-cn.com/contest/weekly-contest-188/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/" target="_blank" rel="noopener">1442. 形成两个疑惑相等数组</a>中。第一个题开始是 O(n^2^)的解法，提交结果为<code>超出时间限制</code>，看了评论找到解法。后一个题一看和之前遇到的类似，终于靠自己想出了解法</li><li><strong>动态规划</strong>（dynamic program)：太多了，基本就是求什么最大xx，最小yy等。重点是 2 个：<ul><li>明确创建怎样的 <strong>dp 数组</strong>，初始化数组。比如<a href="https://leetcode-cn.com/problems/minimum-cost-for-tickets/" target="_blank" rel="noopener">983. 最低票价</a>，知道要用 dp 思路，但不<strong>按照天</strong>来建立数组，就怎么都想不出解决办法。</li><li>明确动态<strong>转移方程</strong>，即 <code>f(i+1) &lt;- f(i)</code> 等。比如<a href="https://leetcode-cn.com/problems/maximal-square/" target="_blank" rel="noopener">221. 最大正方形</a>，一开始是 <code>dp[i][j] = dp[i-1][j-1]+1 if m[i-1][j] == m[i][j-1] == 1</code>，后来测试出错，发现是要 <code>min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])</code></li></ul></li></ol><h2 id="不要低估问题"><a href="#不要低估问题" class="headerlink" title="不要低估问题"></a>不要低估问题</h2><p>每个问题都有它存在的合理性，如果觉得一个问题很简单，很快就写出答案，一般就会：</p><ol><li><code>超出时间限制</code>：基本上 O(n^2^)的解法都不可取，至少得 O(nlog~n~)，最好是 O(n)</li><li><code>解答错误</code>：每道题都会给几组测试用例，至少要把它们都跑一遍，没有问题再提交</li></ol><p>目前遇到最繁琐的问题是<a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener">25. K 个一组翻转链表</a> （就是今天的每日一题）。题目看上去很简单，翻转链表节点，看上去（确实也）没有未知sao套路，但是难度系数是<strong>困难</strong>？不管，想也不想就开始写代码，结果遇到<code>解答错误</code>：</p><ul><li><p>少了元素，多了元素，无限循环了。在链表上的操作，其实本身就是难点，要特别注意节点本身以及 next 的关系。</p></li><li><p>不符合题目要求（翻转了最后几个节点）：</p><blockquote><p>如果节点总数不是 <em>k</em> 的整数倍，那么请将最后剩余的节点<strong>保持原有顺序</strong>。</p></blockquote></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>对于 Python 没有自带的数据结构，自己实现和help functions，方便在本地调试。比如 TreeNode，ListNode 等，还有相应的create, print方法等，待<a href="https://github.com/hliu202/leetcode-py/tree/master/util" target="_blank" rel="noopener">扩充</a>。</p><h1 id="Weekly-Contest-周赛"><a href="#Weekly-Contest-周赛" class="headerlink" title="Weekly Contest 周赛"></a>Weekly Contest 周赛</h1><p>周赛是真正的考验，因为平时的练习题可以看答案，而这个没有答案，且有 1 个半小时限制，又要做出来，还要做的快。一共有 4 道题，简单 x1，中等 x2，困难 x1。</p><p>目前参加了 2 场（第二次的题更简单，所以完成时间更短），幸运的是都做出了前 3 道题，最后一道题实在想不出答案，只能找大佬的答案看看。国内和全球竟然是同步的，分别有三千多和一万多人参加，排名如下：</p><p><a href="https://leetcode-cn.com/contest/weekly-contest-189" target="_blank" rel="noopener">May-17 189</a></p><div class="table-container"><table><thead><tr><th>排名</th><th>用户名</th><th>得分</th><th>完成时间</th><th><a href="https://leetcode-cn.com/contest/weekly-contest-189/problems/number-of-students-doing-homework-at-a-given-time/" target="_blank" rel="noopener">题目1 (3)</a></th><th><a href="https://leetcode-cn.com/contest/weekly-contest-189/problems/rearrange-words-in-a-sentence/" target="_blank" rel="noopener">题目2 (4)</a></th><th><a href="https://leetcode-cn.com/contest/weekly-contest-189/problems/people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list/" target="_blank" rel="noopener">题目3 (5)</a></th><th><a href="https://leetcode-cn.com/contest/weekly-contest-189/problems/maximum-number-of-darts-inside-of-a-circular-dartboard/" target="_blank" rel="noopener">题目4 (7)</a></th></tr></thead><tbody><tr><td>898 / 3691</td><td>liu-hao-b</td><td>12</td><td>1:04:47</td><td>0:08:52 1</td><td>0:28:16</td><td>0:59:47</td><td></td></tr><tr><td>1</td><td><a href="https://leetcode-cn.com/u/tian-tang-6/" target="_blank" rel="noopener">tian-tang-6</a></td><td>19</td><td>0:27:31</td><td>0:01:50</td><td>0:05:49</td><td>0:12:10</td><td>0:27:31</td></tr><tr><td>2</td><td><a href="https://leetcode-cn.com/u/zerotrac2/" target="_blank" rel="noopener">zerotrac2</a></td><td>19</td><td>0:30:45</td><td>0:01:44</td><td>0:04:27</td><td>0:14:01</td><td>0:30:45</td></tr><tr><td>3</td><td><a href="https://leetcode-cn.com/u/qingchuanzhang-microsoft/" target="_blank" rel="noopener">QingchuanZhang-Microsoft</a></td><td>19</td><td>0:31:33</td><td>0:02:24</td><td>0:05:54</td><td>0:13:44</td><td>0:31:33</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>排名</th><th>用户名</th><th>得分</th><th>完成时间</th><th><a href="https://leetcode-cn.com/contest/weekly-contest-189/problems/number-of-students-doing-homework-at-a-given-time/" target="_blank" rel="noopener">题目1 (3)</a></th><th><a href="https://leetcode-cn.com/contest/weekly-contest-189/problems/rearrange-words-in-a-sentence/" target="_blank" rel="noopener">题目2 (4)</a></th><th><a href="https://leetcode-cn.com/contest/weekly-contest-189/problems/people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list/" target="_blank" rel="noopener">题目3 (5)</a></th><th><a href="https://leetcode-cn.com/contest/weekly-contest-189/problems/maximum-number-of-darts-inside-of-a-circular-dartboard/" target="_blank" rel="noopener">题目4 (7)</a></th></tr></thead><tbody><tr><td>3670 / 13038</td><td>liu-hao-b</td><td>12</td><td>1:04:47</td><td>0:08:52 1</td><td>0:28:16</td><td>0:59:47</td><td></td></tr><tr><td>1</td><td><a href="https://leetcode.com/kotamanegi/" target="_blank" rel="noopener">kotamanegi</a></td><td>19</td><td>0:17:30</td><td>0:05:48</td><td>0:04:32</td><td>0:09:50</td><td>0:17:30</td></tr><tr><td>2</td><td><a href="https://leetcode.com/uwi/" target="_blank" rel="noopener">uwi</a></td><td>19</td><td>0:18:45</td><td>0:18:45</td><td>0:17:54</td><td>0:03:28</td><td>0:13:17</td></tr><tr><td>3</td><td><a href="https://leetcode.com/x____x/" target="_blank" rel="noopener">x____x</a></td><td>19</td><td>0:20:08</td><td>0:01:33</td><td>0:07:22</td><td>0:13:58</td><td>0:20:08</td></tr></tbody></table></div><p><a href="https://leetcode-cn.com/contest/weekly-contest-190" target="_blank" rel="noopener">May-24 190</a></p><div class="table-container"><table><thead><tr><th>排名</th><th>用户名</th><th>得分</th><th>完成时间</th><th><a href="https://leetcode-cn.com/contest/weekly-contest-190/problems/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence/" target="_blank" rel="noopener">题目1 (3)</a></th><th><a href="https://leetcode-cn.com/contest/weekly-contest-190/problems/maximum-number-of-vowels-in-a-substring-of-given-length/" target="_blank" rel="noopener">题目2 (4)</a></th><th><a href="https://leetcode-cn.com/contest/weekly-contest-190/problems/pseudo-palindromic-paths-in-a-binary-tree/" target="_blank" rel="noopener">题目3 (5)</a></th><th><a href="https://leetcode-cn.com/contest/weekly-contest-190/problems/max-dot-product-of-two-subsequences/" target="_blank" rel="noopener">题目4 (6)</a></th></tr></thead><tbody><tr><td>649 / 3350</td><td>liu-hao-b</td><td>12</td><td>0:32:29</td><td>0:05:11</td><td>0:14:23 1</td><td>0:27:29</td><td></td></tr><tr><td>1</td><td><a href="https://leetcode-cn.com/u/liouzhou_101/" target="_blank" rel="noopener">liouzhou_101</a></td><td>18</td><td>0:11:50</td><td>0:02:34</td><td>0:04:56</td><td>0:08:47</td><td>0:11:50</td></tr><tr><td>2</td><td><a href="https://leetcode-cn.com/u/heltion/" target="_blank" rel="noopener">Heltion</a></td><td>18</td><td>0:14:32</td><td>0:03:59</td><td>0:06:39</td><td>0:09:36</td><td>0:14:32</td></tr><tr><td>3</td><td><a href="https://leetcode-cn.com/u/qingchuanzhang-microsoft/" target="_blank" rel="noopener">QingchuanZhang-Microsoft</a></td><td>18</td><td>0:14:34</td><td>0:01:52</td><td>0:03:58</td><td>0:08:59</td><td>0:14:34</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>排名</th><th>用户名</th><th>得分</th><th>完成时间</th><th><a href="https://leetcode-cn.com/contest/weekly-contest-190/problems/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence/" target="_blank" rel="noopener">题目1 (3)</a></th><th><a href="https://leetcode-cn.com/contest/weekly-contest-190/problems/maximum-number-of-vowels-in-a-substring-of-given-length/" target="_blank" rel="noopener">题目2 (4)</a></th><th><a href="https://leetcode-cn.com/contest/weekly-contest-190/problems/pseudo-palindromic-paths-in-a-binary-tree/" target="_blank" rel="noopener">题目3 (5)</a></th><th><a href="https://leetcode-cn.com/contest/weekly-contest-190/problems/max-dot-product-of-two-subsequences/" target="_blank" rel="noopener">题目4 (6)</a></th></tr></thead><tbody><tr><td>3020 / 11873</td><td>liu-hao-b</td><td>12</td><td>0:32:29</td><td>0:05:11</td><td>0:14:23 1</td><td>0:27:29</td><td></td></tr><tr><td>1</td><td><a href="https://leetcode.com/huzecong/" target="_blank" rel="noopener">huzecong</a></td><td>18</td><td>0:08:02</td><td>0:01:08</td><td>0:02:24</td><td>0:04:41</td><td>0:08:02</td></tr><tr><td>2</td><td><a href="https://leetcode.com/zcgzcgzcg/" target="_blank" rel="noopener">zcgzcgzcg</a></td><td>18</td><td>0:09:06</td><td>0:01:20</td><td>0:03:01</td><td>0:06:24</td><td>0:09:06</td></tr><tr><td>3</td><td><a href="https://leetcode.com/superluminal/" target="_blank" rel="noopener">superluminal</a></td><td>18</td><td>0:09:54</td><td>0:01:06</td><td>0:02:14</td><td>0:04:39</td><td>0:09:54</td></tr></tbody></table></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以前有在英文 LeetCode 网站上也做过十几道题，没有坚持，也没总结经验。</p><p>现在重现开始做做题，起因是 B 站上看到有大神发周赛的视频，看了之后觉得</p><blockquote><p>卧槽，你为什么这么熟练？</p></blockquote><p>觉得身为程序员，也要做基本的练习，避免退步。今年目标是 365 题，<a href="https://leetcode-cn.com/u/liu-hao-b/" target="_blank" rel="noopener">我的主页</a>，进度条还在初级阶段…</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 0 开始搭建 Hexo NexT主题的博客</title>
      <link href="/2020/05/07/hexo-next-github-blog/"/>
      <url>/2020/05/07/hexo-next-github-blog/</url>
      
        <content type="html"><![CDATA[<p>从 0 开始搭建 <code>Hexo + Next主题 + Github Pages</code> 博客，主要分为 2 部分</p><ol><li>基本配置：基本功能，包括 Hexo 安装，主题安装，配置 yaml，支持 tags 和 categories</li><li>扩展功能：包括评论，阅读人数，TODO</li></ol><a id="more"></a><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">hexo new <span class="string">"hello"</span> <span class="comment"># 在 source/_posts 生成 hello.md</span></span><br><span class="line">hexo g <span class="comment"># generate 根据 source/ 中的 md 生成 html 页面</span></span><br><span class="line">hexo s <span class="comment"># server 启动 server，通过 localhost:4000 在本地访问网页</span></span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo 官网</a></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改 <code>blog/_config.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year-:month-:day-:title.md</span> <span class="comment"># File name of new posts, e.g. 2020-XX-XX-title.md</span></span><br></pre></td></tr></table></figure><h3 id="Github-deploy"><a href="#Github-deploy" class="headerlink" title="Github deploy"></a>Github deploy</h3><p>在 Github 上创建 repo，名叫<code>&lt;yourname&gt;.github.io</code>，该 repo 将负责保存和展示你的 blog 页面。</p><p>安装 deploy 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save  <span class="comment"># deploy pages to github</span></span><br></pre></td></tr></table></figure><p>配置github repo 信息（<code>blog/_config.yml</code>）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span> <span class="comment"># https://github.com/yourname/yourname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>deploy 到 github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d <span class="comment"># 将网页 deploy 到 github repo，通过 https://yourname.github.io 来访问</span></span><br></pre></td></tr></table></figure><h2 id="Next-主题"><a href="#Next-主题" class="headerlink" title="Next 主题"></a>Next 主题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><p>使用 next 主题 <code>blog/_config.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>修改 <code>themes/next/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span>   <span class="comment"># 默认只有 home 和 archives：</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">social:</span> <span class="comment"># 添加 github 链接</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/yourname</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span>  <span class="comment"># 默认为 Muse 主题 </span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span>   <span class="comment"># 将图片放到 blog/source/images/</span></span><br></pre></td></tr></table></figure><p>这样2 个问题</p><ol><li>menu 里的新增的菜单点击进去，发现是 404，没有相关页面</li><li>search 点了也不起作用</li></ol><h3 id="tags-amp-categories"><a href="#tags-amp-categories" class="headerlink" title="tags &amp; categories"></a>tags &amp; categories</h3><p>添加相关 page</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"tags"</span></span><br><span class="line">hexo new page <span class="string">"categories"</span></span><br></pre></td></tr></table></figure><p>修改 <code>blog/source/tags/index.md</code>，加上一行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br></pre></td></tr></table></figure><p>修改 <code>blog/source/categories/index.md</code>，加上一行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br></pre></td></tr></table></figure><h3 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h3><p>默认的字体显示 headers 不明显（H1,H2,H3 看上去区别不大），首先是 enable (<code>themes/next/_config.yml</code>)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">family:</span> <span class="string">Lato</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">0.9375</span>   <span class="comment"># 默认是 1x16px，改为 15px</span></span><br></pre></td></tr></table></figure><p>然后修改大小(<code>themes/next/source/css/_variables/base.styl</code>)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// Headings font size</span><br><span class="line">$font-size-headings-step  = .25em //.125em;</span><br><span class="line">$font-size-headings-base  = ... : 2em //1.625em;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>如何修改 <code>Posted on</code> （发表时间）? 可以修改 md 中的 <code>date</code></p><p>如何隐藏 <code>Edited on</code> （修改时间）?</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">updated_at:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>如何修改 post/draft 模板？<code>scaffolds/post.md</code></p><p>如何插入图片？<a href="https://blog.csdn.net/u010996565/article/details/89196612" target="_blank" rel="noopener">设置</a></p><h1 id="扩展配置"><a href="#扩展配置" class="headerlink" title="扩展配置"></a>扩展配置</h1><p>涉及 Next 主题的其他配置，比如评论，阅读数等（好多功能摸索中，TODO），需要修改<code>themes/next/_config.yml</code>。</p><h2 id="评论功能-Valine"><a href="#评论功能-Valine" class="headerlink" title="评论功能(Valine)"></a>评论功能(Valine)</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span>  <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># Your leancloud application appkey</span></span><br></pre></td></tr></table></figure><p>需要去 <a href="https://leancloud.cn/dashboard/login.html#/signin" target="_blank" rel="noopener">LeanCloud</a> 注册，创建应用，之后，获取 appid 和 appkey，<a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener">see more</a></p><h2 id="阅读数-Views"><a href="#阅读数-Views" class="headerlink" title="阅读数(Views)"></a>阅读数(Views)</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="搜索-Search"><a href="#搜索-Search" class="headerlink" title="搜索(Search)"></a>搜索(Search)</h2><p>需要安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p><code>themes/next/_config.yml</code> 中启用Mathjax</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在博客中使用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">...</span></span><br><span class="line"><span class="attr">category:</span> <span class="string">...</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>关于数学公式：<a href="https://www.jianshu.com/p/8363e3815b92" target="_blank" rel="noopener">Markdown语法中输入数学公式（MathJax）及特殊符号</a></p><h1 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h1><p>如果重装系统，或者从MacOS转到Ubuntu，怎么办？</p><p>重头搭建很麻烦：</p><ol><li>各种npm插件</li><li>博客和next配置文件改动</li></ol><p>最好的办法是直接拷贝，别再重头开始搭建了</p><blockquote><p>亲测MacOS下的博客目录，直接Copy到Ubuntu下，就可以使用</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://yashuning.github.io/tags/hexo/" target="_blank" rel="noopener">Yaya’s blog</a></p><p><a href="https://qiuyiwu.github.io/2019/01/25/Hexo-LocalSearch/" target="_blank" rel="noopener">Create Local Search for Your Hexo Blog</a></p><p><a href="https://guanqr.com/tech/website/hexo-theme-next-customization/" target="_blank" rel="noopener">Hexo-NexT 主题个性优化</a></p><p><a href="http://jeffyang.top/Hexo/Hexo%E4%B8%BB%E9%A2%98Next%E7%BE%8E%E5%8C%96/" target="_blank" rel="noopener">Hexo主题Next美化</a></p><p><a href="https://www.qtmuniao.com/2019/10/16/hexo-theme-landscaping/" target="_blank" rel="noopener">Hexo Next 主题进阶设置</a></p><h2 id="官网教程"><a href="#官网教程" class="headerlink" title="官网教程"></a>官网教程</h2><p><a href="https://theme-next.js.org/docs/getting-started/" target="_blank" rel="noopener">官网 getting-started</a> 设置教程非常友好，图文并茂，强烈建议！</p><p>比如<a href="https://theme-next.js.org/docs/tag-plugins/note.html" target="_blank" rel="noopener">Note</a>:</p><div class="note success">            <h4 id="Success-Header"><a href="#Success-Header" class="headerlink" title="Success Header"></a>Success Header</h4><p><strong>Welcome</strong> to <a href="https://hexo.io" target="_blank" rel="noopener">Hexo!</a></p>          </div><p><a href="https://theme-next.js.org/docs/tag-plugins/label.html" target="_blank" rel="noopener">Label</a>：</p><blockquote><p>Lorem <span class="label default">ipsum</span> <span class="label primary">dolor sit</span> amet, consectetur <span class="label success">adipiscing elit,</span> sed <span class="label info">do eiusmod</span> tempor incididunt ut labore et dolore magna aliqua. Ut enim <em><span class="label warning">ad</span></em> minim veniam, quis <strong><span class="label danger">nostrud</span></strong> exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p></blockquote><p>其他还有视频，PDF等等</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《自控力》读书笔记</title>
      <link href="/2020/05/04/2020-5-4-the-willpower-instinct/"/>
      <url>/2020/05/04/2020-5-4-the-willpower-instinct/</url>
      
        <content type="html"><![CDATA[<p>什么是<a href="https://book.douban.com/subject/10786473/" target="_blank" rel="noopener">《自控力》</a>：人们拥有的“我想要”，“我不要”，以及“我要”这三种力量的协同努力。</p><p>自控力的重点在于处理好“明天”和“今天”，如何才能抵制当前的诱惑，追求长远的目标？</p><p>“明天”无法准确预知：如果你先获得“今天”的奖励，让你放弃转而追求无法预知的“明天”的丰厚奖励，人们也很难办到。所以需要优先考虑未来，延迟考虑当前：把未来的奖励和当前的奖励放到同一个天平上，<strong>不要对未来的奖励打折</strong>。</p><p>其他：人们大部分时间的决定都是无目标的，大脑也没有意识到这一点(需要“自我意识”)。</p><a id="more"></a><h1 id="本能"><a href="#本能" class="headerlink" title="本能"></a>本能</h1><p>意志力是种生理本能，它和压力一样，通过不断进化来保护我们不受自身伤害。</p><ul><li>呼吸出你的自控力：把你的呼吸降到每分钟4～6次，将身体调整到适合自控的生理状态。</li><li>5分钟给意志力加油：出门活动，哪怕只是在周围转转，也能减少压力、改善心情、提供动力。</li><li>睡眠：打盹或补觉可以消除睡眠不足的影响。</li><li>放松能让你恢复意志力储备：躺下，深呼吸，让“放松的生理反应”帮你从自控和压力造成的疲惫中恢复过来。</li></ul><h1 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h1><p>自控力就像肌肉一样有极限。自控力用得太多会疲惫，但坚持训练能增强自控力。</p><p>注意什么时候你的意志力最强，什么时候你最容易放弃。你的疲惫感是真的吗？</p><ul><li>饮食：确保你的身体摄入了足够的食物，能为你提供足够多的能量。</li><li>锻炼：选择一件事来做（“我想要”的力量）或不做（“我不想”的力量），或者记录一件你不曾关注的事情，以此锻炼你的“自控力肌肉”。</li><li>发现自己最重要的“我想要”的力量：也就是你脆弱的时候给你动力的东西。每当你面对诱惑、想要放弃的时候，都想一想这个东西。</li></ul><h1 id="容忍罪恶：为何善行之后会有恶行"><a href="#容忍罪恶：为何善行之后会有恶行" class="headerlink" title="容忍罪恶：为何善行之后会有恶行"></a>容忍罪恶：为何善行之后会有恶行</h1><p>当我们将意志力挑战看成衡量道德水平的标准时，善行就会允许我们做坏事。为了能更好地自控，我们需要忘掉美德，关注目标和价值观。</p><p>你是否在向明天赊账？你是不是告诉自己明天会弥补今天的过错？如果是这样的话，你是否真的弥补上了？光环效应：你是不是只看到了坏东西好的一面，如折扣省钱、零脂肪、保护环境？当你想到你的意志力挑战时，你觉得哪部分的你才是“真实”的你？是想追求目标的你，还是需要被控制的你？</p><ul><li>明天和今天毫无区别：当你想改变行为的时候，试着<strong>减少行为的变化性</strong>，而不是减少某种行为</li><li>取消许可，牢记理由：下一回，当你发现自己在用曾经的善行为放纵辩护的时候，停下来想一想你做“好”事的原因，而不是你应不应该得到奖励</li></ul><h1 id="多巴胺：为什么我们误把渴望当幸福"><a href="#多巴胺：为什么我们误把渴望当幸福" class="headerlink" title="多巴胺：为什么我们误把渴望当幸福"></a>多巴胺：为什么我们误把渴望当幸福</h1><p>我们的大脑错把<strong>奖励的承诺</strong>（多巴胺）当做快乐的保证，所以，我们会从不可能带来满足的事物中寻找满足感。</p><p>是什么让你的多巴胺神经元不停燃烧？是什么给了你奖励的承诺，迫使你去寻找满足感？观察一下零售商和营销人员如何刺激奖励的承诺？注意观察，欲望是如何引发压力和焦虑的。</p><ul><li>为了你的“我要做”挑战释放多巴胺：如果你总是拖延着不做某些事，试着把它和那些能让你的多巴胺神经元燃烧的事联系在一起，促使你自己去做那些事</li><li>测试奖励的承诺：做那些大脑告诉你你会快乐、但似乎无法让你满足的事，比如吃零食、购物、电视以及与网络相关的、浪费时间的事，注意观察自己放纵时的感受。现实和大脑的承诺相符吗？</li></ul><h1 id="那又如何：情绪低落使人屈服于诱惑"><a href="#那又如何：情绪低落使人屈服于诱惑" class="headerlink" title="那又如何：情绪低落使人屈服于诱惑"></a>那又如何：情绪低落使人屈服于诱惑</h1><p>情绪低落会使人屈服于诱惑，摆脱罪恶感会让你变得更强大。</p><p>当你面临压力、感到焦虑或情绪低落时，你会怎么解决？注意那些从媒体、网络或其他渠道听到或看到的压力因素。当意志力失效的时候，你会产生罪恶感并责备自己吗？你会用幻想未来的自己来改善现在的心情，而不是采取实际行动来改善自己的行为吗？</p><ul><li>有效的解压方法：下一回，当你面临巨大的压力时，尝试一种有效的解压方法，例如锻炼身体或参加体育活动、祈祷或参加宗教活动、阅读、听音乐、花时间和家人朋友在一起、按摩、外出散步、冥想或做瑜伽，以及培养其他有创造性的爱好。</li><li>失败的时候，请原谅自己：面对自己的挫折，持同情自我的态度，以免罪恶感让你再次放弃抗争</li><li>乐观的悲观主义者更有可能成功：预测你什么时候、会怎样受到诱惑和违背承诺，想象一个不让自己放弃抗争的具体方法</li></ul><h1 id="出售未来：及时享乐的经济学"><a href="#出售未来：及时享乐的经济学" class="headerlink" title="出售未来：及时享乐的经济学"></a>出售未来：及时享乐的经济学</h1><p>我们无法明确地预知未来。</p><p><strong>未来的奖励会打折扣</strong>，你打了几折？你在等待未来的自己吗？</p><ul><li>等待10分钟：在诱惑面前强制安排10分钟的等待时间。在这10分钟里，一定要时刻想着长远的奖励，抵制住诱惑。</li><li>降低你的折扣率：当你受到诱惑，要做和长期利益相悖的事情时，请想一想，这个选择意味着，你为了即时的满足感放弃了更好的长期奖励。</li><li>预先对未来的自己作出承诺：作好拒绝诱惑的准备，让改变偏好变得更难，用奖励或威胁来激励未来的自己。</li><li>预见未来的自己：创造一个未来的记忆，给未来的自己发条信息，想象一下未来的自己。</li></ul><h1 id="为什么意志力会传染"><a href="#为什么意志力会传染" class="headerlink" title="为什么意志力会传染"></a>为什么意志力会传染</h1><p>自控受到社会认同的影响，这使得意志力和诱惑都具有传染性。</p><p>你的社交网络，有没有其他人和你有同样的意志力挑战？你在模仿谁？你最可能从谁身上学到东西？你有没有用社会认同来说服自己，说你的意志力挑战没什么大不了？</p><ul><li>增强你的免疫系统：在每天刚开始的时候，花点时间想一想自己的目标。</li><li>感染自控力：给自己树立一个榜样。问问自己：那个意志力强人会怎么做？</li><li>自豪感的力量：公开你的意志力挑战，想象你在意志力挑战成功后将多么自豪。</li><li>把它变成集体项目</li></ul><h1 id="“我不要”的力量"><a href="#“我不要”的力量" class="headerlink" title="“我不要”的力量"></a>“我不要”的力量</h1><p>试图压抑自己的想法、情绪和欲望，只会产生相反的效果，让你更容易去想，去感受、去做你原本想逃避的事</p><p>你有没有想逃避的想法？压抑这些想法是否有效？试图摆脱某种想法，是否反而让它更强烈？你最想得到的是什么？当你拼命试图把某件东西赶出脑海，是否反而对它产生了更强的渴望？</p><ul><li>忠于你的感受，但别相信你所有的想法：当你产生不快时，专注于呼吸，想象这些想法像浮云一样逐渐淡去</li><li>直面只剩欲望，但不要付诸行动：当欲望来袭，注意到它，但不要马上试图转移注意力或与之争辩。提醒自己“白熊”现象和“反弹”效应。</li><li>驾驭冲动：但冲动一直存在时，与这种感觉共处，像驾驭海浪一样驾驭它，不要试图摆脱它，也不要将冲动付诸行动。</li></ul><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>如果说真的有自控力秘诀，那么从科学的角度来说确实有一个，那就是集中注意力。</p><p>当你作出决定的时候，你需要训练自己的大脑，让它意识到这一点，而不是让它自行其是。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科普 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《如何阅读一本书》读书笔记</title>
      <link href="/2020/05/03/2020-5-3-how-to-read-a-book/"/>
      <url>/2020/05/03/2020-5-3-how-to-read-a-book/</url>
      
        <content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/1013208/" target="_blank" rel="noopener">《如何阅读一本书》</a>介绍读书技巧，本书的主旨：</p><blockquote><ol><li>阅读分为 4 个层次：基础-&gt;检视-&gt;分析-&gt;主题。没有经过分析阅读，就没法理解一本书。</li><li>主动阅读：对自己，以及自己面对的书籍，要求的越多，获得的就越多</li></ol></blockquote><p>阅读的目的：为获得资讯而读，为求得理解而读。如果一本书很轻松就读懂，说明从中也学不到什么知识，重点是加工困难的部分，成为自己的知识。</p><a id="more"></a><h1 id="第一个层次：基础阅读"><a href="#第一个层次：基础阅读" class="headerlink" title="第一个层次：基础阅读"></a>第一个层次：基础阅读</h1><p>能识字，能“阅读”任何书籍，但缺乏阅读技巧，不一定能有效（有收获）</p><h1 id="第二个层次：检视阅读"><a href="#第二个层次：检视阅读" class="headerlink" title="第二个层次：检视阅读"></a>第二个层次：检视阅读</h1><h2 id="有系统的略读（Skim-or-Pre-read）"><a href="#有系统的略读（Skim-or-Pre-read）" class="headerlink" title="有系统的略读（Skim or Pre-read）"></a>有系统的略读（Skim or Pre-read）</h2><p>把自己当做一个侦探，发掘书的价值（这是一本什么样的书，是否有必要精读），略读：</p><ol><li>书名页+序</li><li>目录页</li><li>索引：重要词条和相关书籍与作者</li><li>挑几个最相关的篇章，看看开头和结尾</li><li>随便翻翻，留意主题的脉动</li></ol><p>最多不过 1 小时，对本书有个大体的了解，关键是要<strong>主动+集中精神</strong></p><h2 id="粗浅的阅读"><a href="#粗浅的阅读" class="headerlink" title="粗浅的阅读"></a>粗浅的阅读</h2><p>只注意能理解的部分，跳过难懂的地方，达到对本书 50%或更少的理解，但也值得，为更深层次的阅读打基础。</p><p>如果你太专注于细微的难以理解的小点，就会陷入其中，或者忽视了本书的大原则。</p><h2 id="阅读的速度"><a href="#阅读的速度" class="headerlink" title="阅读的速度"></a>阅读的速度</h2><p>一般人的速度都有提升空间，但不能一味地求快，需要用不同的速度：在无关紧要的地方加快，在困难的地方放慢。</p><p>加快阅读速度：避免“半出声”（会过度把注意力集中在发音上，从而忽略了理解其内涵），矫正眼睛的“逗留”和“倒退”现象。<strong>指读法</strong>：强迫验证跟随手指，向前移动。</p><h1 id="第三个层次：分析阅读"><a href="#第三个层次：分析阅读" class="headerlink" title="第三个层次：分析阅读"></a>第三个层次：分析阅读</h1><p>本书重点，花了最多的篇幅（超过50%）来描述。</p><h2 id="做一个对自我有要求的读者"><a href="#做一个对自我有要求的读者" class="headerlink" title="做一个对自我有要求的读者"></a>做一个对自我有要求的读者</h2><p>围绕 4 个问题：</p><ol><li>整体上，这本书在谈些什么？</li><li>细节上，作者细说了什么，怎么说的？</li><li>说得有道理吗？</li><li>跟我有什么关系？</li></ol><p>让一本书真正属于你：你必须读出言外之意，才能有更大收获。要求“写出言外之意”。</p><h2 id="第一个阶段：透视一本书"><a href="#第一个阶段：透视一本书" class="headerlink" title="第一个阶段：透视一本书"></a>第一个阶段：透视一本书</h2><p>像“X光”一样，透过衣服，肌肉，看到骨架。</p><p>规则一：书籍的<code>分类</code></p><p>规则二：使用单一的句子或者几句话，叙述本书的<code>整体内容</code></p><p>规则三：说明本书的重要篇章有哪些，怎么组织成<code>整体的架构</code>？</p><p>规则四：找出作者在问的问题，或作者想解决的<code>问题</code></p><h2 id="第二个阶段：共识和主旨"><a href="#第二个阶段：共识和主旨" class="headerlink" title="第二个阶段：共识和主旨"></a>第二个阶段：共识和主旨</h2><p>规则五：与作者达成<code>共识</code>。找出<strong>关键字</strong>，注意<strong>专门用语</strong>与<strong>特殊词汇</strong></p><p>规则六：将一本书最重要的句子（<strong>关键句</strong>）圈出来，找出其中的<code>主旨</code>。</p><p>规则七：找出重要<code>论述</code>的段落</p><p>规则八：找出作者的<code>解答</code>。解决了哪些问题，那些事未解决的</p><h2 id="第三个阶段：公正的评价一本书"><a href="#第三个阶段：公正的评价一本书" class="headerlink" title="第三个阶段：公正的评价一本书"></a>第三个阶段：公正的评价一本书</h2><p>受教是一种美德。受教不等于被动和顺从，不是卑躬屈膝。</p><p>规则九：完整的<code>了解</code>一本书，不要急着评论</p><p>规则十：不要<code>争强好胜</code>，或者盲目反对</p><p>规则十一：尊重<code>知识与个人观点</code>的不同，在做任何判断之前，要找出理论基础。</p><p>反对作者：</p><ol><li>知识不足</li><li>知识错误</li><li>不合逻辑</li><li>分析与理由不完整</li></ol><h1 id="第四个层次：主题阅读"><a href="#第四个层次：主题阅读" class="headerlink" title="第四个层次：主题阅读"></a>第四个层次：主题阅读</h1><p>领域中相关的作者和书籍。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科普 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Globalprotect - a problem with the security certificate</title>
      <link href="/2020/04/22/2020-4-22-globalprotect-ca/"/>
      <url>/2020/04/22/2020-4-22-globalprotect-ca/</url>
      
        <content type="html"><![CDATA[<p>最近遇到个很迷的 bug，导致 globalprotect 不能连上公司 VPN，错误信息是关于 <code>Security Certificate</code>，详情如下：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ globalprotect connect -p vpn-xx.com</span><br><span class="line">Retrieving configuration...</span><br><span class="line"></span><br><span class="line">There is a problem with the security certificate, so the identity of den-vpn.amperecomputing.com cannot be verified. Please contact the Help Desk <span class="keyword">for</span> your organization to have the issue rectified.</span><br><span class="line">Warning: The communication with vpn-xx.com may have been compromised. We recommend that you <span class="keyword">do</span> not <span class="built_in">continue</span> with this connection.</span><br></pre></td></tr></table></figure><p>网上找了好久，没有找到直接的解决方案。后来 Stackoverflow 上找到个 <code>certificate</code> 相关的问题：<a href="https://askubuntu.com/questions/440580/how-does-one-remove-a-certificate-authoritys-certificate-from-a-system" target="_blank" rel="noopener">How does one remove a certificate authority’s certificate from a system?</a>，照着做了第一步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ sudo dpkg-reconfigure ca-certificates</span><br><span class="line">/usr/sbin/dpkg-reconfigure: ca-certificates is broken or not fully installed</span><br></pre></td></tr></table></figure><p>报错了，才发现应该是 <code>ca-certificates</code> 问题，重新安装之后就好了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ sudo apt-get install ca-certificates</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode Remote Debug C/C++ Application (gcc) 实践</title>
      <link href="/2020/04/20/2020-4-20-vscode-debug/"/>
      <url>/2020/04/20/2020-4-20-vscode-debug/</url>
      
        <content type="html"><![CDATA[<p>VSCode 是我主要使用的编辑器，主要优点有：</p><ol><li><strong>轻快简洁，功能强大</strong>。再也不用记住繁琐的命令，用 <code>ctrl+shift+p</code> 快速搜索相关操作。Multi Cursors 编辑多行。</li><li><strong>颜值高</strong>。“Dracula Official” 和terminal 使用的 Dracula theme 简直绝配。</li><li><strong>插件多，扩展强</strong>。“Remote - SSH” 用来远程开发的神器，甚至能支持 AArch64。</li></ol><p>唯一的遗憾，就是还不能方便的 debug，所以前几天花时间捣鼓了一阵，终于基本可用了。</p><a id="more"></a><h1 id="Small-Case"><a href="#Small-Case" class="headerlink" title="Small Case"></a>Small Case</h1><p>先从小例子开始，Fibnacci计算 fib.c：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">int</span> f0 = <span class="number">0</span>, f1 = <span class="number">1</span>, f2, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        f2 = f0 + f1;</span><br><span class="line">        f0 = f1;</span><br><span class="line">        f1 = f2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, res;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    res = fib(m);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fib(%d) is %d\n"</span>, m, res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先编译和测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ gcc -O0 -g fib.c -o fib</span><br><span class="line">❯ ./fib</span><br><span class="line">6</span><br><span class="line">fib(6) is 8</span><br></pre></td></tr></table></figure><p>参考官方<a href="https://code.visualstudio.com/docs/cpp/launch-json-reference" target="_blank" rel="noopener">C++ debug configuration文档</a>，修改 <code>launch.json</code>:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"(lldb) Launch"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">    <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">    <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/fib"</span>,</span><br><span class="line">    <span class="attr">"args"</span>: [],</span><br><span class="line">    <span class="attr">"stopAtEntry"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">    <span class="attr">"environment"</span>: [],</span><br><span class="line">    <span class="attr">"externalConsole"</span>: <span class="literal">true</span>, <span class="comment">// 必须为 true，否则没找到终端能让我们输入参数</span></span><br><span class="line">    <span class="attr">"MIMode"</span>: <span class="string">"lldb"</span> <span class="comment">// 实验在 MacBook 上，所以用了自带的 lldb</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>发现基本可用，除了快捷键有点不方便（F5, F10 和 F11，后面 2 个键盘位置太偏），还有几个小问题：</p><ol><li><code>launch.json</code> 里的设置 <code>externalConsole</code> 要为 true，否则找不到一个终端能让我输入 cin 参数，程序就卡在 19 行 scanf 那里了。</li><li><strong>条件断点(conditional breakpoint)</strong>的支持不好。设置条件断点后（比如在第 11 行设置为<code>i == 5</code>），竟然不能立刻生效，需要：1）手动 disable breakpoint，再手动 enable breakpoint；或者 2）重启 debug</li><li>没有 disassembly instruction mode，不能查看汇编代码（这点没有 eclipse 方便）</li></ol><h1 id="How-to-Debug-GCC"><a href="#How-to-Debug-GCC" class="headerlink" title="How to Debug GCC"></a>How to Debug GCC</h1><p>重点来了，要满足工作需要，还要能 debug 更复杂的场景，比如怎样 debug 编译器(gcc or llvm)？下面详解通过本地 MacBook 在远程 X86 服务器上用 g++ 编译 fib.c，即<code>g++ -c -O2 fib.c</code>的过程。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在远程 X86 服务器上 build gcc 代码，最好用 O0 （默认的是 O2），config 和 build 步骤如下：</p><ol><li>下载第三方 library，到 gcc 源代码目录（比如<code>cd /home/hliu/toolchain/gcc/</code>)，<code>contrib/download_prerequisites</code></li><li>配置 gcc：<code>mkdir ../build; cd ../build; ../gcc/configure --prefix=$PWD/../install_O0 --disable-multilib</code></li><li><code>make BOOT_CFLAGS=&quot;-g3 -O0&quot; -j 5</code></li><li><code>make install</code></li></ol><p>然后，启动 MacBook 上的 VSCode，通过 Remote-SSH 插件连上远端 host ip，然后:</p><ol><li>打开 fib.c 所在文件夹</li><li>右键 -&gt; <code>Add Folder to Workspace</code>：将 gcc 代码加入 workspace，因为我们同时需要 fib.c 和 gcc 代码。</li></ol><p>下面详解后面的步骤</p><h2 id="配置-launch-json"><a href="#配置-launch-json" class="headerlink" title="配置 launch.json"></a>配置 launch.json</h2><p>VSCode -&gt; Run -&gt; Add Configurations -&gt;  (gdb) Launch，有个初始的默认配置如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">"configurations": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"(gdb) Launch"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">        <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">        <span class="attr">"program"</span>: <span class="string">"enter program name, for example $&#123;workspaceFolder&#125;/a.out"</span>,</span><br><span class="line">        <span class="attr">"args"</span>: [],</span><br><span class="line">        <span class="attr">"stopAtEntry"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">        <span class="attr">"environment"</span>: [],</span><br><span class="line">        <span class="attr">"externalConsole"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"MIMode"</span>: <span class="string">"gdb"</span>,</span><br><span class="line">        <span class="attr">"setupCommands"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line">                <span class="attr">"ignoreFailures"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>参见 <a href="https://dmalcolm.fedorapeople.org/gcc/newbies-guide/debugging.html" target="_blank" rel="noopener">Debugging GCC文档</a>，gcc 只是个 <code>driver</code>，真正要调试的是 C/C++ Compiler，即 <code>cc1</code> 或者 <code>cc1plus</code>。通过 gcc 命令行加 <code>-v</code> 获取 Command Line Args 列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/toolchain/install_O0/bin/gcc -O2 -c fib.c -v</span><br><span class="line">...</span><br><span class="line">/home/hliu/toolchain/install_O0/bin/../libexec/gcc/x86_64-pc-linux-gnu/10.0.1/cc1 -quiet -v -imultiarch x86_64-linux-gnu -iprefix /home/hliu/toolchain/install_O0/bin/../lib/gcc/x86_64-pc-linux-gnu/10.0.1/ fib.c -quiet -dumpbase fib.c -mtune=generic -march=x86-64 -auxbase fib -O2 -version -o /tmp/ccR1kTkZ.s</span><br></pre></td></tr></table></figure><p>其中，<code>program</code> 改成 cc1 的位置，后面的都是<code>args</code>，用引号和逗号将参数分隔（<strong>这里不能用一个引号全部括起来，VSCode 不能识别</strong>）。所以相关改动如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"program": "/home/hliu/toolchain/install_O0/bin/../libexec/gcc/x86_64-pc-linux-gnu/10.0.1/cc1",</span><br><span class="line">"args": ["-quiet", "-v", "-imultiarch", "x86_64-linux-gnu", "-iprefix", "/home/hliu/toolchain/install_O0/bin/../lib/gcc/x86_64-pc-linux-gnu/10.0.1/", "fib.c", "-quiet", "-dumpbase", "fib.c", "-mtune=generic", "-march=x86-64", "-auxbase", "fib", "-O2", "-version", "-o", "/tmp/ccR1kTkZ.s",],</span><br></pre></td></tr></table></figure><h2 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h2><p>然后 <code>RUN (gdb) Launch</code>，开始调试，会停在 entry 入口 <code>main.c</code>，然后就可以打断点调试了。比如我们想调试 <code>pass_fre</code>，在pass_fre::execute() (<code>tree-ssa-sccvn.c</code>)里打个断点，<code>Continue(F5)</code>就会停到那里。</p><p>然而，真正用起来还有很多问题。</p><h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>现在VSCode提供的信息有 VARIABLES, WATCH, CALL STACK, BREAKPOINTS，以及 DEBUG CONSOLE，其他诸如 disssembly，register 没有。</p><p>可以通过手动执行 gdb 的命令行，输入相关参数来查看，即 DEBUG CONSOLE 中输入命令，但 VSCode 很坑的是命令前面需要手动输入 <code>-exec &lt;command&gt;</code>，详见 VSCode DEBUG CONSOLE 提示：</p><blockquote><p>execute debugger commands using “-exec <command>“, for example “-exec info registers” will list registers in use (when GDB is the debugger)</p></blockquote><p>而每次都要输入 <code>-exec</code>的话，太麻烦了，所以网上找到的 work around 是添加 shortcut (keybindings.json)：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+alt+e"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.insertSnippet"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"inDebugRepl"</span>,</span><br><span class="line">    <span class="attr">"args"</span>: &#123;</span><br><span class="line">        <span class="attr">"snippet"</span>: <span class="string">"-exec "</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>ctrl+alt+e</code> 来快速输入 <code>-exec</code>，比如我们要查看 registers:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ -<span class="built_in">exec</span> i reg</span><br><span class="line">rax            0x00</span><br><span class="line">rbx            0x00</span><br><span class="line">rcx            0x77</span><br><span class="line">rdx            0x2ee182849158184</span><br></pre></td></tr></table></figure><h3 id="gdbinit"><a href="#gdbinit" class="headerlink" title="gdbinit"></a>gdbinit</h3><p>调试 cc1 的过程中需要用到一些 help function，比如打印当前 function name：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define pfn</span><br><span class="line">    <span class="function">p <span class="title">current_function_name</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="built_in">end</span></span></span><br></pre></td></tr></table></figure><p>这些 函数是写在一个文件里（gcc.dbg)，以前是命令行直接 <code>gdb -x gcc.dbg</code>。现在不能这样用了。所以我在 <code>~/.gdbinit</code> 中加了一行，每次自动加载:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> &lt;path-to-gcc.gdb&gt;</span><br></pre></td></tr></table></figure><h3 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h3><p>真正头痛的问题来了，见前面 small case，本来条件断点就不能自动触发，每次设置后需要手动 disable enable，而更严重的是发现不能比较 <code>string</code> 和 <code>const char *</code>了。如果源代码很大，需要定位到相关函数名，几乎必须要用条件断点。</p><p>原来（eclipse 或者命令行下用 gdb）比较 <code>const char *</code> 是使用 <code>$_streq</code>，更多详情见 <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Convenience-Funs.html#Convenience-Funs" target="_blank" rel="noopener">gdb convenience functions</a>，现在条件断点完全没有设置上，报错了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Condition <span class="string">"_<span class="variable">$streq</span>(current_function_name(), "</span>fib<span class="string">")"</span> : Problem parsing arguments: <span class="built_in">break</span>-insert -f -c <span class="string">"_<span class="variable">$streq</span>(current_function_name(), "</span>fib<span class="string">")"</span></span><br></pre></td></tr></table></figure><p>仔细看log，是引号识别问题，所以条件断点改成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_$streq(current_function_name(), \&quot;fib\&quot;)</span><br></pre></td></tr></table></figure><p>这样就能在编译函数 fib 时停下来了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过 VSCode remote-ssh 远程调试程序非常方便，但也遇到了一些坑：</p><ol><li>标准输入输出，配置文件要用”externalConsole”</li><li>命令行模式每次需要手动输入 <code>-exec</code>，可以添加相应的快捷键</li><li>配置文件 <code>args</code> 需要用多个引号和逗号分隔，不能用一个引号</li><li>条件断点：设置后不能立即生效，需要手动 disable&amp;enable，或者重启调试</li><li>条件断点：处理字符串的引号时有 bug，需要加(\)</li></ol>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ include and iostream/stdio.h/cstdio</title>
      <link href="/2020/04/01/2020-4-1-C-standard-io-headers/"/>
      <url>/2020/04/01/2020-4-1-C-standard-io-headers/</url>
      
        <content type="html"><![CDATA[<p>C++ include 头文件的格式，区分C/C++ Standard Input/Output headers: iostream, stdio.h, cstdio</p><a id="more"></a><h2 id="C-include"><a href="#C-include" class="headerlink" title="C++ include"></a>C++ include</h2><p>C++ include 头文件的格式有 2 种 (<a href="https://gcc.gnu.org/onlinedocs/cpp/Include-Syntax.html" target="_blank" rel="noopener">read more</a>)：</p><ol><li><code>#include &lt;file&gt;</code> : 系统头文件(system header files)</li><li><code>#include &quot;file&quot;</code> : 用户自己的头文件</li></ol><p>可以用 <code>gcc -v</code> 查看 include 顺序，比如我Ubuntu 18.04 X86 机器的系统头文件顺序是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;...&gt; search starts here:</span><br><span class="line">&#x2F;usr&#x2F;include&#x2F;c++&#x2F;7</span><br><span class="line">&#x2F;usr&#x2F;include&#x2F;x86_64-linux-gnu&#x2F;c++&#x2F;7</span><br><span class="line">&#x2F;usr&#x2F;include&#x2F;c++&#x2F;7&#x2F;backward</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;7&#x2F;include</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;include</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;7&#x2F;include-fixed</span><br><span class="line">&#x2F;usr&#x2F;include&#x2F;x86_64-linux-gnu</span><br><span class="line">&#x2F;usr&#x2F;include</span><br></pre></td></tr></table></figure><h2 id="Standard-I-O-Headers"><a href="#Standard-I-O-Headers" class="headerlink" title="Standard I/O Headers"></a>Standard I/O Headers</h2><p>C++中的标准输入输出头文件 (<a href="https://docs.oracle.com/cd/E19059-01/wrkshp50/805-4956/6j4mh6gov/index.html" target="_blank" rel="noopener">read more</a>)：</p><ol><li>iostream: 是 C++ 的标准输入输出头文件，包括cout, cin, endl 等</li><li>stdio.h: 是 C 的标准输入输出头文件，包括 printf, scanf 等，不建议用，原因有 2 个：<ul><li>没有 C++ namespace</li><li>没有 iostream 安全，干净，以及格式问题等（<a href="https://www.quora.com/Is-stdio-h-better-than-iostream" target="_blank" rel="noopener">read more</a>)</li></ul></li><li>cstdio: C++ 头文件，将 stdio.h 包含在 std namespace 中（即 std::printf)，如果喜欢用 printf 等，建议用 cstdio</li></ol><p>PS: 1 和 3 的位置都在 C++ include 文件夹（即/usr/include/c++/7），而 2 在 C include 文件夹（即/usr/include）</p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>C++ style：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, World!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C style</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ header </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 计划</title>
      <link href="/2020/01/01/2020-1-1-new-year-plan/"/>
      <url>/2020/01/01/2020-1-1-new-year-plan/</url>
      
        <content type="html"><![CDATA[<h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><ol><li><strong>专业类</strong>：计算机专业书籍和学习资料，制定目标（多长时间，多少进度等），当前状态（是否完成，进度）</li><li><strong>科普类</strong>：学习技巧，科学见闻等</li><li>其他，不能学到知识，但可以陶冶情操~</li></ol><a id="more"></a><h3 id="专业类"><a href="#专业类" class="headerlink" title="专业类"></a>专业类</h3><p>书籍和公开课</p><div class="table-container"><table><thead><tr><th>Title</th><th>Comments</th><th>Target</th><th>Cur status</th></tr></thead><tbody><tr><td>「高级编译器的设计与实现」</td><td>砖头书1，鲸书, start from 2019-10</td><td>in 3月</td><td>control flow<br>data flow<br>AA<br>RA</td></tr><tr><td>「深入理解计算机系统」</td><td>砖头书2，CSAPP</td><td>in 2月</td><td></td></tr><tr><td>「C++ Primer」</td><td>砖头书3</td><td>in 3月</td><td>Chapter -2 by Jun-13</td></tr><tr><td>「程序员的自我修养」</td><td></td><td>in 1月</td><td></td></tr><tr><td>「Effective C++」</td><td></td><td></td><td></td></tr><tr><td>「Effective Java」</td><td></td><td></td><td></td></tr><tr><td>leetcode cn: <a href="https://leetcode-cn.com/u/liu-hao-b/" target="_blank" rel="noopener">my home page</a></td><td>start from may-4</td><td>365+</td><td>6 by may-6<br>58 by Jun-13</td></tr><tr><td>CppCon</td><td><a href="https://www.youtube.com/user/CppCon" target="_blank" rel="noopener">video</a>, <a href="https://github.com/CppCon" target="_blank" rel="noopener">slides</a></td><td>12</td></tr></tbody></table></div><p>PS1: 「C++ Primer」基本要求：什么是面向对象？答：封装、继承、多态，各自举例子说明。然后后面无论问你什么，你把话题扯到3种智能指针的特性和实现（shared, weak, unique, pointer这几个单词的读音一定要标准），背诵15分钟C++ Primer的知识点，讲一下构造、析构、拷贝构造，再提一下移动构造、移动赋值和右值引用，顺便再谈一下容器和迭代器</p><h3 id="科普类"><a href="#科普类" class="headerlink" title="科普类"></a>科普类</h3><div class="table-container"><table><thead><tr><th>Title</th><th>Comments</th><th>status</th></tr></thead><tbody><tr><td><a href="https://www.bilibili.com/video/BV1EW411u7th" target="_blank" rel="noopener">Crash Coarse Computing Science</a></td><td>中文翻译</td><td>2 周</td></tr><tr><td><a href="http://open.163.com/newview/movie/courseintro?newurl=%2Fspecial%2Fopencourse%2Fcs50.html" target="_blank" rel="noopener">计算机科学 CS50</a> 哈弗大学</td><td>为了讲“二分法”，撕掉了一本书</td><td></td></tr><tr><td>《文明之光》</td><td>吴军大佬写的科普</td><td>done</td></tr><tr><td><a href="https://space.bilibili.com/9458053" target="_blank" rel="noopener">李永乐老师</a></td><td>寓教于乐，形象生动</td><td></td></tr><tr><td>《如何阅读一本书》</td><td>How to read a book</td><td>done</td></tr><tr><td>《自控力》</td><td>The willpower instinct</td><td>done</td></tr><tr><td>高效能人士的 7 个习惯</td><td>如何积极主动提升“效能”</td><td>done</td></tr></tbody></table></div><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><div class="table-container"><table><thead><tr><th>Title</th><th>Comments</th><th>status</th></tr></thead><tbody><tr><td>「活着」</td><td></td><td>done</td></tr><tr><td>「坏小孩」</td><td>「隐秘的角落」原著</td><td>done</td></tr><tr><td></td><td></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> plan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plan </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
